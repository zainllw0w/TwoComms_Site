#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –≤ CSS –∏ HTML/JS —Ñ–∞–π–ª–∞—Ö
"""

import re
import os
from pathlib import Path

def find_keyframes_in_css(css_file):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ @keyframes –≤ CSS —Ñ–∞–π–ª–µ"""
    with open(css_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    keyframes = re.findall(r'@keyframes\s+([a-zA-Z0-9_-]+)', content)
    return keyframes

def find_animation_usage_in_css(css_file):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –≤ CSS"""
    with open(css_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º animation –∏ animation-name
    animations = re.findall(r'animation(?:-name)?\s*:\s*([^;]+)', content)
    used_animations = set()
    
    for anim in animations:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        anim_list = [a.strip() for a in anim.split(',')]
        for a in anim_list:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞)
            anim_name = a.split()[0] if a.split() else a
            used_animations.add(anim_name)
    
    return used_animations

def find_animation_usage_in_templates(templates_dir):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –≤ HTML/JS —Ñ–∞–π–ª–∞—Ö"""
    used_animations = set()
    
    for root, dirs, files in os.walk(templates_dir):
        for file in files:
            if file.endswith(('.html', '.js')):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—â–µ–º animation –≤ style –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∏ JavaScript
                    animations = re.findall(r'animation\s*:\s*([^;]+)', content)
                    for anim in animations:
                        anim_list = [a.strip() for a in anim.split(',')]
                        for a in anim_list:
                            anim_name = a.split()[0] if a.split() else a
                            used_animations.add(anim_name)
                    
                    # –ò—â–µ–º –≤ JavaScript
                    js_animations = re.findall(r'\.style\.animation\s*=\s*[\'"]([^\'"]+)[\'"]', content)
                    for anim in js_animations:
                        anim_name = anim.split()[0] if anim.split() else anim
                        used_animations.add(anim_name)
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    
    return used_animations

def main():
    css_file = 'twocomms/twocomms_django_theme/static/css/styles.css'
    templates_dir = 'twocomms/twocomms_django_theme/templates'
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π...")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ keyframes
    all_keyframes = find_keyframes_in_css(css_file)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ keyframes: {len(all_keyframes)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ CSS
    css_used = find_animation_usage_in_css(css_file)
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ CSS: {len(css_used)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
    template_used = find_animation_usage_in_templates(templates_dir)
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö: {len(template_used)}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    all_used = css_used | template_used
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
    unused = set(all_keyframes) - all_used
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   - –í—Å–µ–≥–æ keyframes: {len(all_keyframes)}")
    print(f"   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {len(all_used)}")
    print(f"   - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {len(unused)}")
    
    if unused:
        print(f"\n‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:")
        for anim in sorted(unused):
            print(f"   - {anim}")
    else:
        print(f"\n‚úÖ –í—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ keyframes –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    print(f"\nüìã –í—Å–µ keyframes:")
    for anim in sorted(all_keyframes):
        status = "‚úÖ" if anim in all_used else "‚ùå"
        print(f"   {status} {anim}")

if __name__ == "__main__":
    main()

