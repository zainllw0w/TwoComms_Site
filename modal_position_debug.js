// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
// –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ https://twocomms.shop/orders/dropshipper/

console.log('üîç –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê');
console.log('='.repeat(80));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
function analyzeElement(element, name) {
    if (!element) {
        console.log(`‚ùå ${name}: –ù–ï –ù–ê–ô–î–ï–ù`);
        return;
    }
    
    const computed = window.getComputedStyle(element);
    const rect = element.getBoundingClientRect();
    
    console.log(`\nüì¶ ${name}:`);
    console.log('  –ü–æ–ª–æ–∂–µ–Ω–∏–µ:', {
        position: computed.position,
        top: computed.top,
        left: computed.left,
        transform: computed.transform,
        zIndex: computed.zIndex,
    });
    console.log('  –†–∞–∑–º–µ—Ä—ã:', {
        width: computed.width,
        height: computed.height,
        maxWidth: computed.maxWidth,
        maxHeight: computed.maxHeight,
    });
    console.log('  BoundingRect:', {
        top: rect.top,
        left: rect.left,
        right: rect.right,
        bottom: rect.bottom,
        x: rect.x,
        y: rect.y,
        width: rect.width,
        height: rect.height,
    });
    console.log('  Display & Overflow:', {
        display: computed.display,
        overflow: computed.overflow,
        overflowX: computed.overflowX,
        overflowY: computed.overflowY,
    });
    console.log('  Visibility:', {
        opacity: computed.opacity,
        visibility: computed.visibility,
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function checkParentPositions(element, name) {
    console.log(`\nüîó –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è ${name}:`);
    let parent = element.parentElement;
    let level = 1;
    
    while (parent && level <= 10) {
        const computed = window.getComputedStyle(parent);
        const hasProblematicStyle = 
            computed.position !== 'static' ||
            computed.transform !== 'none' ||
            computed.willChange !== 'auto' ||
            computed.perspective !== 'none';
        
        if (hasProblematicStyle || parent.classList.contains('ds-shell') || parent.classList.contains('ds-main') || parent.tagName === 'BODY') {
            console.log(`  ${'  '.repeat(level)}${level}. ${parent.tagName}${parent.className ? '.' + parent.className.split(' ').join('.') : ''}:`, {
                position: computed.position,
                transform: computed.transform,
                willChange: computed.willChange,
                perspective: computed.perspective,
                containingBlock: hasProblematicStyle ? '‚ö†Ô∏è –°–û–ó–î–ê–ï–¢ CONTAINING BLOCK' : '‚úÖ OK',
            });
        }
        
        parent = parent.parentElement;
        level++;
    }
}

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º viewport
console.log('\nüì± VIEWPORT:');
console.log('  –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞:', {
    width: window.innerWidth,
    height: window.innerHeight,
});
console.log('  –ü—Ä–æ–∫—Ä—É—Ç–∫–∞:', {
    scrollX: window.scrollX,
    scrollY: window.scrollY,
});

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º body
const body = document.body;
analyzeElement(body, 'BODY');

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º .ds-shell
const dsShell = document.querySelector('.ds-shell');
analyzeElement(dsShell, '.ds-shell');

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º .ds-main
const dsMain = document.querySelector('.ds-main');
analyzeElement(dsMain, '.ds-main');

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º backdrop
const backdrop = document.getElementById('dsProductPopupBackdrop');
if (backdrop) {
    analyzeElement(backdrop, 'BACKDROP');
    checkParentPositions(backdrop, 'BACKDROP');
}

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
const modal = document.getElementById('dsProductPopup');
if (modal) {
    analyzeElement(modal, 'MODAL');
    checkParentPositions(modal, 'MODAL');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º dataset
    console.log('\nüíæ DATASET –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', modal.dataset);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º inline —Å—Ç–∏–ª–∏
    console.log('\nüé® INLINE STYLES –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:');
    console.log('  style.position:', modal.style.position);
    console.log('  style.top:', modal.style.top);
    console.log('  style.left:', modal.style.left);
    console.log('  style.transform:', modal.style.transform);
    console.log('  style.zIndex:', modal.style.zIndex);
} else {
    console.log('\n‚ùå MODAL: –ù–ï –ù–ê–ô–î–ï–ù - –æ—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
}

// –†–∞—Å—á–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('\nüéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –¶–ï–ù–¢–†–ò–†–û–í–ê–ù–ò–ï (–¥–ª—è position: fixed):');
const centerTop = window.innerHeight / 2;
const centerLeft = window.innerWidth / 2;
console.log(`  top: 50% (–∏–ª–∏ ${centerTop}px)`);
console.log(`  left: 50% (–∏–ª–∏ ${centerLeft}px)`);
console.log('  transform: translate(-50%, -50%)');
console.log('  ‚ö†Ô∏è –ù–ï –ù–£–ñ–ù–û —É—á–∏—Ç—ã–≤–∞—Ç—å scrollY –¥–ª—è position: fixed!');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
if (modal) {
    const computed = window.getComputedStyle(modal);
    const rect = modal.getBoundingClientRect();
    
    console.log('\nüßÆ –í–´–ß–ò–°–õ–ï–ù–ù–û–ï –ü–û–õ–û–ñ–ï–ù–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê:');
    console.log('  –¶–µ–Ω—Ç—Ä viewport:', { x: window.innerWidth / 2, y: window.innerHeight / 2 });
    console.log('  –¶–µ–Ω—Ç—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', { 
        x: rect.left + rect.width / 2, 
        y: rect.top + rect.height / 2 
    });
    
    const deltaX = (rect.left + rect.width / 2) - (window.innerWidth / 2);
    const deltaY = (rect.top + rect.height / 2) - (window.innerHeight / 2);
    
    console.log('  –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞:', { 
        deltaX: deltaX.toFixed(2) + 'px',
        deltaY: deltaY.toFixed(2) + 'px',
        centered: Math.abs(deltaX) < 5 && Math.abs(deltaY) < 5 ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    console.log('\nüëÅÔ∏è –í–ò–î–ò–ú–û–°–¢–¨ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê:');
    const isVisible = 
        rect.top < window.innerHeight &&
        rect.bottom > 0 &&
        rect.left < window.innerWidth &&
        rect.right > 0;
    
    console.log('  –í –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏:', isVisible ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    
    if (!isVisible) {
        console.log('  ‚ö†Ô∏è –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ó–ê –ü–†–ï–î–ï–õ–ê–ú–ò VIEWPORT!');
        if (rect.top < 0) console.log('    - –°–≤–µ—Ä—Ö—É (top < 0)');
        if (rect.bottom > window.innerHeight) console.log('    - –°–Ω–∏–∑—É (bottom > innerHeight)');
        if (rect.left < 0) console.log('    - –°–ª–µ–≤–∞ (left < 0)');
        if (rect.right > window.innerWidth) console.log('    - –°–ø—Ä–∞–≤–∞ (right > innerWidth)');
    }
}

console.log('\n' + '='.repeat(80));
console.log('‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
console.log('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –≤—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');

