#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ TwoComms
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python, JavaScript –∏ CSS —Ñ–∞–π–ª—ã
"""
import os
import re
import hashlib
from pathlib import Path
from collections import defaultdict
import difflib

class CodeDuplicationFinder:
    def __init__(self, project_root):
        self.project_root = Path(project_root)
        self.duplicates = defaultdict(list)
        self.similar_code = []
        
    def normalize_code(self, code):
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        # –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        code = re.sub(r'#.*$', '', code, flags=re.MULTILINE)
        code = re.sub(r'//.*$', '', code, flags=re.MULTILINE)
        code = re.sub(r'/\*.*?\*/', '', code, flags=re.DOTALL)
        code = re.sub(r'\s+', ' ', code)
        return code.strip()
    
    def get_code_hash(self, code):
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∫–æ–¥–∞"""
        normalized = self.normalize_code(code)
        return hashlib.md5(normalized.encode()).hexdigest()
    
    def find_duplicate_files(self, pattern):
        """–ù–∞–π—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è {pattern} —Ñ–∞–π–ª–æ–≤...")
        
        file_hashes = defaultdict(list)
        files = list(self.project_root.rglob(pattern))
        
        for file_path in files:
            if '__pycache__' in str(file_path) or 'node_modules' in str(file_path):
                continue
                
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    code_hash = self.get_code_hash(content)
                    file_hashes[code_hash].append(file_path)
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
        
        # –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates_found = 0
        for hash_val, files in file_hashes.items():
            if len(files) > 1:
                duplicates_found += 1
                print(f"\n  üî¥ –î—É–±–ª–∏–∫–∞—Ç #{duplicates_found}:")
                for file in files:
                    size = file.stat().st_size
                    print(f"    - {file.relative_to(self.project_root)} ({size} bytes)")
        
        if duplicates_found == 0:
            print("  ‚úÖ –ü–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\n  üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_found}")
        
        return duplicates_found
    
    def find_similar_functions(self, pattern, min_similarity=0.8):
        """–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ {pattern} —Ñ–∞–π–ª–∞—Ö...")
        
        # –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        if pattern == '*.py':
            func_pattern = r'def\s+(\w+)\s*\([^)]*\):\s*(.*?)(?=\n(?:def\s|\w+\s*=|class\s|$))'
        elif pattern == '*.js':
            func_pattern = r'function\s+(\w+)\s*\([^)]*\)\s*{(.*?)}'
        else:
            return 0
        
        functions = []
        files = list(self.project_root.rglob(pattern))
        
        for file_path in files:
            if '__pycache__' in str(file_path) or 'node_modules' in str(file_path):
                continue
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    matches = re.finditer(func_pattern, content, re.DOTALL | re.MULTILINE)
                    for match in matches:
                        func_name = match.group(1)
                        func_body = match.group(2)
                        if len(func_body.strip()) > 50:  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                            functions.append({
                                'name': func_name,
                                'body': func_body,
                                'file': file_path,
                                'normalized': self.normalize_code(func_body)
                            })
            except Exception as e:
                pass
        
        # –°—Ä–∞–≤–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
        similar_count = 0
        checked = set()
        
        for i, func1 in enumerate(functions):
            for j, func2 in enumerate(functions[i+1:], i+1):
                pair_key = tuple(sorted([i, j]))
                if pair_key in checked:
                    continue
                checked.add(pair_key)
                
                # –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
                similarity = difflib.SequenceMatcher(
                    None, 
                    func1['normalized'], 
                    func2['normalized']
                ).ratio()
                
                if similarity >= min_similarity and func1['file'] != func2['file']:
                    similar_count += 1
                    if similar_count <= 10:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
                        print(f"\n  üü° –ü–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (similarity: {similarity:.1%}):")
                        print(f"    1. {func1['name']} –≤ {func1['file'].relative_to(self.project_root)}")
                        print(f"    2. {func2['name']} –≤ {func2['file'].relative_to(self.project_root)}")
        
        if similar_count == 0:
            print("  ‚úÖ –ü–æ—Ö–æ–∂–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\n  üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {similar_count}")
            if similar_count > 10:
                print(f"    (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 10, –≤—Å–µ–≥–æ {similar_count})")
        
        return similar_count
    
    def find_duplicate_blocks(self, pattern, min_lines=10):
        """–ù–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –±–ª–æ–∫–∏ –∫–æ–¥–∞"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ ({min_lines}+ —Å—Ç—Ä–æ–∫)...")
        
        blocks = defaultdict(list)
        files = list(self.project_root.rglob(pattern))
        
        for file_path in files:
            if '__pycache__' in str(file_path) or 'node_modules' in str(file_path):
                continue
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    
                    # –°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤
                    for i in range(len(lines) - min_lines + 1):
                        block = ''.join(lines[i:i+min_lines])
                        block_hash = self.get_code_hash(block)
                        blocks[block_hash].append({
                            'file': file_path,
                            'start_line': i + 1,
                            'block': block
                        })
            except Exception as e:
                pass
        
        # –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates_found = 0
        for block_hash, occurrences in blocks.items():
            if len(occurrences) > 1:
                duplicates_found += 1
                if duplicates_found <= 5:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                    print(f"\n  üî¥ –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ #{duplicates_found}:")
                    for occ in occurrences[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                        print(f"    - {occ['file'].relative_to(self.project_root)}:{occ['start_line']}")
                    if len(occurrences) > 3:
                        print(f"    ... –∏ –µ—â—ë {len(occurrences) - 3} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")
        
        if duplicates_found == 0:
            print("  ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\n  üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤: {duplicates_found}")
            if duplicates_found > 5:
                print(f"    (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 5, –≤—Å–µ–≥–æ {duplicates_found})")
        
        return duplicates_found
    
    def analyze_complexity(self, pattern):
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤"""
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {pattern} —Ñ–∞–π–ª–æ–≤...")
        
        files_info = []
        files = list(self.project_root.rglob(pattern))
        
        for file_path in files:
            if '__pycache__' in str(file_path) or 'node_modules' in str(file_path):
                continue
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    loc = len([l for l in lines if l.strip() and not l.strip().startswith('#')])
                    
                    if pattern == '*.py':
                        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
                        classes = len(re.findall(r'^class\s+\w+', ''.join(lines), re.MULTILINE))
                        functions = len(re.findall(r'^def\s+\w+', ''.join(lines), re.MULTILINE))
                    elif pattern == '*.js':
                        classes = len(re.findall(r'class\s+\w+', ''.join(lines)))
                        functions = len(re.findall(r'function\s+\w+|const\s+\w+\s*=\s*\(', ''.join(lines)))
                    else:
                        classes = 0
                        functions = 0
                    
                    files_info.append({
                        'file': file_path,
                        'loc': loc,
                        'classes': classes,
                        'functions': functions
                    })
            except Exception as e:
                pass
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ LOC
        files_info.sort(key=lambda x: x['loc'], reverse=True)
        
        print("\n  üìä –¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:")
        for i, info in enumerate(files_info[:10], 1):
            print(f"    {i}. {info['file'].relative_to(self.project_root)}")
            print(f"       LOC: {info['loc']}, –ö–ª–∞—Å—Å–æ–≤: {info['classes']}, –§—É–Ω–∫—Ü–∏–π: {info['functions']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if files_info:
            total_loc = sum(f['loc'] for f in files_info)
            avg_loc = total_loc / len(files_info)
            print(f"\n  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"    –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files_info)}")
            print(f"    –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_loc:,}")
            print(f"    –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {avg_loc:.0f} LOC")
            print(f"    –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {files_info[0]['loc']} LOC")
        
        return len(files_info)

def main():
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë          –ü–û–ò–°–ö –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–û–î–ê –í TWOCOMMS                          ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    project_root = Path(__file__).parent / 'twocomms'
    finder = CodeDuplicationFinder(project_root)
    
    results = {}
    
    # Python —Ñ–∞–π–ª—ã
    print("\n" + "=" * 70)
    print("–ê–ù–ê–õ–ò–ó PYTHON –§–ê–ô–õ–û–í")
    print("=" * 70)
    results['py_duplicates'] = finder.find_duplicate_files('*.py')
    results['py_similar'] = finder.find_similar_functions('*.py', min_similarity=0.85)
    results['py_blocks'] = finder.find_duplicate_blocks('*.py', min_lines=15)
    results['py_complexity'] = finder.analyze_complexity('*.py')
    
    # JavaScript —Ñ–∞–π–ª—ã
    print("\n" + "=" * 70)
    print("–ê–ù–ê–õ–ò–ó JAVASCRIPT –§–ê–ô–õ–û–í")
    print("=" * 70)
    results['js_duplicates'] = finder.find_duplicate_files('*.js')
    results['js_similar'] = finder.find_similar_functions('*.js', min_similarity=0.85)
    results['js_blocks'] = finder.find_duplicate_blocks('*.js', min_lines=15)
    results['js_complexity'] = finder.analyze_complexity('*.js')
    
    # CSS —Ñ–∞–π–ª—ã
    print("\n" + "=" * 70)
    print("–ê–ù–ê–õ–ò–ó CSS –§–ê–ô–õ–û–í")
    print("=" * 70)
    results['css_duplicates'] = finder.find_duplicate_files('*.css')
    results['css_blocks'] = finder.find_duplicate_blocks('*.css', min_lines=10)
    results['css_complexity'] = finder.analyze_complexity('*.css')
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 70)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 70)
    print(f"\nPython:")
    print(f"  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: {results['py_duplicates']}")
    print(f"  –ü–æ—Ö–æ–∂–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {results['py_similar']}")
    print(f"  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤: {results['py_blocks']}")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['py_complexity']}")
    
    print(f"\nJavaScript:")
    print(f"  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: {results['js_duplicates']}")
    print(f"  –ü–æ—Ö–æ–∂–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: {results['js_similar']}")
    print(f"  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤: {results['js_blocks']}")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['js_complexity']}")
    
    print(f"\nCSS:")
    print(f"  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: {results['css_duplicates']}")
    print(f"  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤: {results['css_blocks']}")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['css_complexity']}")
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    total_issues = sum([
        results['py_duplicates'], results['py_similar'], results['py_blocks'],
        results['js_duplicates'], results['js_similar'], results['js_blocks'],
        results['css_duplicates'], results['css_blocks']
    ])
    
    if total_issues > 0:
        print(f"  üî¥ –ù–∞–π–¥–µ–Ω–æ {total_issues} –ø—Ä–æ–±–ª–µ–º —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞")
        print("  üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏")
    else:
        print("  ‚úÖ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

if __name__ == '__main__':
    main()

