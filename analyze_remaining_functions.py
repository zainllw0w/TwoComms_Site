#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª—ñ–∑—É —Ñ—É–Ω–∫—Ü—ñ–π, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —É —Å—Ç–∞—Ä–æ–º—É views.py.

–ü–æ—Ä—ñ–≤–Ω—é—î —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Å—Ç–∞—Ä–æ–º—É views.py –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –≤ –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—è—Ö
—Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î, —è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —â–µ –Ω–µ –º—ñ–≥—Ä–æ–≤–∞–Ω—ñ.
"""

import re
from pathlib import Path
from typing import Set, Dict, List
from collections import defaultdict

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str, color=Colors.BLUE):
    """–î—Ä—É–∫ –∑–∞–≥–æ–ª–æ–≤–∫—É."""
    print(f"\n{Colors.BOLD}{color}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{color}{text.center(80)}{Colors.END}")
    print(f"{Colors.BOLD}{color}{'='*80}{Colors.END}\n")

def get_functions_from_file(file_path: Path) -> Dict[str, int]:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ —Ñ—É–Ω–∫—Ü—ñ–π –∑ —Ñ–∞–π–ª—É: {–Ω–∞–∑–≤–∞: –Ω–æ–º–µ—Ä_—Ä—è–¥–∫–∞}.
    """
    functions = {}
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                # –®—É–∫–∞—î–º–æ def —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä—è–¥–∫–∞
                match = re.match(r'^def ([a-z_][a-z0-9_]*)\s*\(', line)
                if match:
                    func_name = match.group(1)
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (—â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ _)
                    if not func_name.startswith('_'):
                        functions[func_name] = line_num
                
                # –¢–∞–∫–æ–∂ —à—É–∫–∞—î–º–æ –∫–ª–∞—Å–∏ (—Ñ–æ—Ä–º–∏ —Ç–æ—â–æ)
                class_match = re.match(r'^class ([A-Z][a-zA-Z0-9_]*)', line)
                if class_match:
                    class_name = class_match.group(1)
                    functions[class_name] = line_num
                    
    except Exception as e:
        print(f"{Colors.RED}‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {file_path}: {e}{Colors.END}")
    
    return functions

def get_all_module_functions(views_dir: Path) -> Dict[str, str]:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤.
    –ü–æ–≤–µ—Ä—Ç–∞—î: {–Ω–∞–∑–≤–∞_—Ñ—É–Ω–∫—Ü—ñ—ó: –Ω–∞–∑–≤–∞_–º–æ–¥—É–ª—è}
    """
    all_functions = {}
    
    # –ú–æ–¥—É–ª—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–Ω–æ–≤—ñ –º–æ–¥—É–ª—ñ –º—ñ–≥—Ä–∞—Ü—ñ—ó)
    modules = [
        'monobank.py',
        'wholesale.py',
        'admin.py',
        'stores.py',
        'dropship.py',
        'cart.py',
        'api.py',
        'auth.py',
        'catalog.py',
        'checkout.py',
        'product.py',
        'profile.py',
        'static_pages.py',
        'utils.py',
        'debug.py',  # Debug functions
    ]
    
    for module_name in modules:
        module_path = views_dir / module_name
        if module_path.exists():
            functions = get_functions_from_file(module_path)
            for func_name in functions.keys():
                all_functions[func_name] = module_name
    
    return all_functions

def categorize_functions(func_name: str) -> str:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é.
    """
    name_lower = func_name.lower()
    
    if 'monobank' in name_lower or 'mono' in name_lower:
        return 'Monobank'
    elif 'wholesale' in name_lower or 'pricelist' in name_lower:
        return 'Wholesale'
    elif 'admin' in name_lower:
        return 'Admin'
    elif 'store' in name_lower and 'offline' in name_lower:
        return 'Offline Stores'
    elif 'dropship' in name_lower:
        return 'Dropshipping'
    elif 'cart' in name_lower or 'promo' in name_lower:
        return 'Cart'
    elif 'api' in name_lower or 'json' in name_lower:
        return 'API'
    elif 'login' in name_lower or 'register' in name_lower or 'logout' in name_lower or 'auth' in name_lower:
        return 'Auth'
    elif 'catalog' in name_lower or 'category' in name_lower or 'search' in name_lower:
        return 'Catalog'
    elif 'product' in name_lower and 'admin' not in name_lower:
        return 'Product'
    elif 'checkout' in name_lower or 'order' in name_lower and 'admin' not in name_lower:
        return 'Checkout/Orders'
    elif 'profile' in name_lower or 'favorite' in name_lower or 'points' in name_lower:
        return 'Profile'
    elif 'debug' in name_lower:
        return 'Debug'
    elif any(word in name_lower for word in ['robots', 'sitemap', 'about', 'contact', 'delivery', 'cooperation']):
        return 'Static Pages'
    else:
        return 'Other'

def analyze_remaining_functions(old_views_path: Path, views_dir: Path):
    """
    –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —É —Å—Ç–∞—Ä–æ–º—É views.py.
    """
    print_header("üîç –ê–ù–ê–õ–Ü–ó –ó–ê–õ–ò–®–ö–û–í–ò–• –§–£–ù–ö–¶–Ü–ô", Colors.CYAN)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ views.py
    old_functions = get_functions_from_file(old_views_path)
    print(f"{Colors.CYAN}‚ÑπÔ∏è  –§—É–Ω–∫—Ü—ñ–π —É —Å—Ç–∞—Ä–æ–º—É views.py: {len(old_functions)}{Colors.END}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤
    new_module_functions = get_all_module_functions(views_dir)
    print(f"{Colors.CYAN}‚ÑπÔ∏è  –§—É–Ω–∫—Ü—ñ–π —É –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—è—Ö: {len(new_module_functions)}{Colors.END}")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —â–µ –Ω–µ –º—ñ–≥—Ä–æ–≤–∞–Ω—ñ
    remaining = {}
    migrated = {}
    
    for func_name, line_num in old_functions.items():
        if func_name in new_module_functions:
            migrated[func_name] = (line_num, new_module_functions[func_name])
        else:
            remaining[func_name] = line_num
    
    print(f"{Colors.GREEN}‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ: {len(migrated)}{Colors.END}")
    print(f"{Colors.YELLOW}‚ö†Ô∏è  –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {len(remaining)}{Colors.END}")
    
    return old_functions, new_module_functions, migrated, remaining

def print_migrated_summary(migrated: Dict[str, tuple]):
    """
    –í–∏–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –º—ñ–≥—Ä–æ–≤–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
    """
    print_header("‚úÖ –ú–Ü–ì–†–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á", Colors.GREEN)
    
    # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –º–æ–¥—É–ª—è–º–∏
    by_module = defaultdict(list)
    for func_name, (line_num, module_name) in migrated.items():
        by_module[module_name].append((func_name, line_num))
    
    for module_name in sorted(by_module.keys()):
        functions = sorted(by_module[module_name], key=lambda x: x[1])
        print(f"\n{Colors.BOLD}{module_name}{Colors.END} ({len(functions)} —Ñ—É–Ω–∫—Ü—ñ–π):")
        for func_name, line_num in functions:
            print(f"  ‚Ä¢ {func_name:40} (—Ä—è–¥–æ–∫ {line_num:5})")

def print_remaining_summary(remaining: Dict[str, int]):
    """
    –í–∏–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
    """
    print_header("‚ö†Ô∏è –ó–ê–õ–ò–®–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á", Colors.YELLOW)
    
    if not remaining:
        print(f"{Colors.GREEN}üéâ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º—ñ–≥—Ä–æ–≤–∞–Ω–æ!{Colors.END}")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    by_category = defaultdict(list)
    for func_name, line_num in remaining.items():
        category = categorize_functions(func_name)
        by_category[category].append((func_name, line_num))
    
    for category in sorted(by_category.keys()):
        functions = sorted(by_category[category], key=lambda x: x[1])
        print(f"\n{Colors.BOLD}{Colors.MAGENTA}{category}{Colors.END} ({len(functions)} —Ñ—É–Ω–∫—Ü—ñ–π):")
        for func_name, line_num in functions:
            print(f"  ‚Ä¢ {func_name:40} (—Ä—è–¥–æ–∫ {line_num:5})")

def generate_migration_recommendations(remaining: Dict[str, int]):
    """
    –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
    """
    print_header("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –ú–Ü–ì–†–ê–¶–Ü–á", Colors.BLUE)
    
    if not remaining:
        print(f"{Colors.GREEN}‚ú® –ú—ñ–≥—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–µ–º–∞—î.{Colors.END}")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    by_category = defaultdict(list)
    for func_name, line_num in remaining.items():
        category = categorize_functions(func_name)
        by_category[category].append((func_name, line_num))
    
    recommendations = {
        'Auth': ('auth.py', '–§—É–Ω–∫—Ü—ñ—ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'),
        'Cart': ('cart.py', '–§—É–Ω–∫—Ü—ñ—ó –∫–æ—à–∏–∫–∞ —Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤'),
        'API': ('api.py', 'API endpoints'),
        'Catalog': ('catalog.py', '–§—É–Ω–∫—Ü—ñ—ó –∫–∞—Ç–∞–ª–æ–≥—É —Ç–∞ –ø–æ—à—É–∫—É'),
        'Product': ('product.py', '–§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏'),
        'Checkout/Orders': ('checkout.py', '–§—É–Ω–∫—Ü—ñ—ó –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å'),
        'Profile': ('profile.py', '–§—É–Ω–∫—Ü—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'),
        'Static Pages': ('static_pages.py', '–°—Ç–∞—Ç–∏—á–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏'),
        'Debug': ('debug.py', 'Debug —Ñ—É–Ω–∫—Ü—ñ—ó (–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏)'),
        'Other': (None, '–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–Ω–∞–ª—ñ–∑—É')
    }
    
    for category in sorted(by_category.keys()):
        functions = by_category[category]
        target_module, description = recommendations.get(category, (None, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è'))
        
        print(f"\n{Colors.BOLD}{category}{Colors.END} ({len(functions)} —Ñ—É–Ω–∫—Ü—ñ–π)")
        if target_module:
            print(f"  ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å: {Colors.CYAN}{target_module}{Colors.END}")
        else:
            print(f"  ‚Üí {Colors.YELLOW}–ü–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥—É–ª—è{Colors.END}")
        print(f"  ‚Üí {description}")
        
        # –ü–µ—Ä—à—ñ 3 —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –ø—Ä–∏–∫–ª–∞–¥
        for func_name, line_num in functions[:3]:
            print(f"     ‚Ä¢ {func_name} (—Ä—è–¥–æ–∫ {line_num})")
        if len(functions) > 3:
            print(f"     ... —Ç–∞ —â–µ {len(functions) - 3}")

def generate_cleanup_plan(remaining: Dict[str, int]):
    """
    –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–ª–∞–Ω –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ views.py.
    """
    print_header("üóëÔ∏è –ü–õ–ê–ù –û–ß–ò–©–ï–ù–ù–Ø", Colors.RED)
    
    total_old_functions = len(remaining)
    
    if total_old_functions == 0:
        print(f"{Colors.GREEN}‚úÖ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º—ñ–≥—Ä–æ–≤–∞–Ω–æ!{Colors.END}")
        print(f"\n{Colors.BOLD}–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:{Colors.END}")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏")
        print("  2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ backward compatibility")
        print("  3. –°—Ç–≤–æ—Ä–∏—Ç–∏ backup —Å—Ç–∞—Ä–æ–≥–æ views.py")
        print("  4. –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π views.py")
        print("  5. –û–Ω–æ–≤–∏—Ç–∏ __init__.py (–≤–∏–¥–∞–ª–∏—Ç–∏ _old_views import)")
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è  –ó–∞–ª–∏—à–∏–ª–æ—Å—å {total_old_functions} —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó{Colors.END}")
        print(f"\n{Colors.BOLD}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:{Colors.END}")
        print("  1. –ú—ñ–≥—Ä—É–≤–∞—Ç–∏ –∑–∞–ª–∏—à–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–≥—ñ–¥–Ω–æ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –≤–∏—â–µ")
        print("  2. –û–Ω–æ–≤–∏—Ç–∏ __init__.py –¥–ª—è –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π")
        print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏")
        print("  4. –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –º—ñ–≥—Ä–∞—Ü—ñ—ó - –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π views.py")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    print(f"{Colors.BOLD}{Colors.CYAN}")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë               –ê–ù–ê–õ–Ü–ó –ó–ê–õ–ò–®–ö–û–í–ò–• –§–£–ù–ö–¶–Ü–ô –£ VIEWS.PY                        ‚ïë")
    print("‚ïë                         TwoComms E-commerce                                ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"{Colors.END}\n")
    
    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    project_root = Path(__file__).parent / 'twocomms'
    old_views_path = project_root / 'storefront' / 'views.py'
    views_dir = project_root / 'storefront' / 'views'
    
    if not old_views_path.exists():
        print(f"{Colors.YELLOW}‚ö†Ô∏è  –°—Ç–∞—Ä–∏–π views.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {old_views_path}{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –º—ñ–≥—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.END}")
        return
    
    if not views_dir.exists():
        print(f"{Colors.RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è views –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {views_dir}{Colors.END}")
        return
    
    # –ê–Ω–∞–ª—ñ–∑
    old_functions, new_module_functions, migrated, remaining = analyze_remaining_functions(old_views_path, views_dir)
    
    # –í–∏–≤–æ–¥–∏
    print_migrated_summary(migrated)
    print_remaining_summary(remaining)
    generate_migration_recommendations(remaining)
    generate_cleanup_plan(remaining)
    
    # –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
    print_header("üìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –ü–Ü–î–°–£–ú–û–ö", Colors.BOLD)
    migration_percent = (len(migrated) / len(old_functions) * 100) if old_functions else 100
    
    print(f"{Colors.BOLD}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:{Colors.END}")
    print(f"  ‚Ä¢ –í—Å—å–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–π —É —Å—Ç–∞—Ä–æ–º—É views.py: {len(old_functions)}")
    print(f"  ‚Ä¢ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ: {Colors.GREEN}{len(migrated)}{Colors.END}")
    print(f"  ‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {Colors.YELLOW}{len(remaining)}{Colors.END}")
    print(f"  ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å: {Colors.CYAN}{migration_percent:.1f}%{Colors.END}")
    
    if migration_percent == 100:
        print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ –ú–Ü–ì–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –ù–ê 100%! üéâ{Colors.END}")
    elif migration_percent >= 75:
        print(f"\n{Colors.GREEN}{Colors.BOLD}‚ú® –ú–Ü–ì–†–ê–¶–Ü–Ø –ú–ê–ô–ñ–ï –ó–ê–í–ï–†–®–ï–ù–ê! ‚ú®{Colors.END}")
    else:
        print(f"\n{Colors.YELLOW}{Colors.BOLD}‚öôÔ∏è  –ú–Ü–ì–†–ê–¶–Ü–Ø –í –ü–†–û–¶–ï–°–Ü... ‚öôÔ∏è{Colors.END}")

if __name__ == '__main__':
    main()

