#!/usr/bin/env python3
"""
–£–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ TwoComms
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
from pathlib import Path
from PIL import Image, ImageOps
import subprocess

def get_file_size(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö"""
    return os.path.getsize(file_path)

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KiB"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} MiB"

def is_original_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º (–Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)"""
    file_name = file_path.name.lower()
    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    exclude_patterns = [
        '_optimized', '_320w', '_640w', '_768w', '_1024w', '_1280w', '_1920w',
        '.webp', '_mobile', '_tablet', '_desktop', '_4k'
    ]
    return not any(pattern in file_name for pattern in exclude_patterns)

def optimize_jpg(input_path, output_path, quality=85, max_width=None, max_height=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        with Image.open(input_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if max_width or max_height:
                img.thumbnail((max_width or img.width, max_height or img.height), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            img.save(output_path, 'JPEG', quality=quality, optimize=True, progressive=True)
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ JPEG {input_path}: {e}")
        return False

def create_webp(input_path, output_path, quality=85, max_width=None, max_height=None):
    """–°–æ–∑–¥–∞–µ—Ç WebP –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        with Image.open(input_path) as img:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if max_width or max_height:
                img.thumbnail((max_width or img.width, max_height or img.height), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WebP
            img.save(output_path, 'WebP', quality=quality, optimize=True)
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebP {input_path}: {e}")
        return False

def optimize_single_image(input_path, output_dir=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏"""
    if not os.path.exists(input_path):
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return None
    
    input_path = Path(input_path)
    if output_dir is None:
        output_dir = input_path.parent
    else:
        output_dir = Path(output_dir)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    output_dir.mkdir(parents=True, exist_ok=True)
    
    original_size = get_file_size(input_path)
    results = {
        'original': {
            'path': str(input_path),
            'size': original_size,
            'format': input_path.suffix.lower()
        }
    }
    
    print(f"üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {input_path.name}")
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {format_size(original_size)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        with Image.open(input_path) as img:
            width, height = img.size
            print(f"   –†–∞–∑–º–µ—Ä: {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return results
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    optimized_path = output_dir / f"{input_path.stem}_optimized{input_path.suffix}"
    
    if input_path.suffix.lower() in ['.jpg', '.jpeg', '.JPG', '.JPEG']:
        success = optimize_jpg(input_path, optimized_path)
    else:
        print(f"   ‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {input_path.suffix}")
        return results
    
    if success:
        optimized_size = get_file_size(optimized_path)
        savings = original_size - optimized_size
        savings_percent = (savings / original_size) * 100
        
        results['optimized'] = {
            'path': str(optimized_path),
            'size': optimized_size,
            'savings': savings,
            'savings_percent': savings_percent
        }
        
        print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {format_size(optimized_size)} (—ç–∫–æ–Ω–æ–º–∏—è {format_size(savings)}, {savings_percent:.1f}%)")
    
    # –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    webp_path = output_dir / f"{input_path.stem}.webp"
    if create_webp(input_path, webp_path):
        webp_size = get_file_size(webp_path)
        webp_savings = original_size - webp_size
        webp_savings_percent = (webp_savings / original_size) * 100
        
        results['webp'] = {
            'path': str(webp_path),
            'size': webp_size,
            'savings': webp_savings,
            'savings_percent': webp_savings_percent
        }
        
        print(f"   ‚úÖ WebP: {format_size(webp_size)} (—ç–∫–æ–Ω–æ–º–∏—è {format_size(webp_savings)}, {webp_savings_percent:.1f}%)")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if width > 640:  # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ 640px
        responsive_sizes = [
            (320, "mobile"),      # –ú–æ–±–∏–ª—å–Ω—ã–µ
            (640, "tablet"),      # –ü–ª–∞–Ω—à–µ—Ç—ã
            (768, "tablet_large"), # –ë–æ–ª—å—à–∏–µ –ø–ª–∞–Ω—à–µ—Ç—ã
            (1024, "desktop"),    # –î–µ—Å–∫—Ç–æ–ø
        ]
        
        for size, name in responsive_sizes:
            if width > size:  # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –±–æ–ª—å—à–µ
                # JPEG –≤–µ—Ä—Å–∏—è
                jpg_path = output_dir / f"{input_path.stem}_{size}w.jpg"
                if optimize_jpg(input_path, jpg_path, max_width=size):
                    jpg_size = get_file_size(jpg_path)
                    results[f'jpg_{size}w'] = {
                        'path': str(jpg_path),
                        'size': jpg_size,
                        'width': size
                    }
                    print(f"   ‚úÖ {size}w JPEG: {format_size(jpg_size)}")
                
                # WebP –≤–µ—Ä—Å–∏—è
                webp_path = output_dir / f"{input_path.stem}_{size}w.webp"
                if create_webp(input_path, webp_path, max_width=size):
                    webp_size = get_file_size(webp_path)
                    results[f'webp_{size}w'] = {
                        'path': str(webp_path),
                        'size': webp_size,
                        'width': size
                    }
                    print(f"   ‚úÖ {size}w WebP: {format_size(webp_size)}")
    
    return results

def find_original_images():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    image_dirs = [
        'twocomms/media/products',
        'twocomms/media/product_colors',
        'twocomms/media/payment_screenshots'
    ]
    
    original_images = []
    
    for image_dir in image_dirs:
        if not os.path.exists(image_dir):
            continue
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JPEG —Ñ–∞–π–ª—ã
        for file_path in Path(image_dir).rglob('*.jpg'):
            if file_path.is_file() and is_original_file(file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã)
                file_size = get_file_size(file_path)
                if file_size > 100 * 1024:  # –ë–æ–ª—å—à–µ 100KB
                    original_images.append(file_path)
    
    return original_images

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üñºÔ∏è –£–º–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ TwoComms")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PIL
    try:
        from PIL import Image
    except ImportError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pillow: pip install Pillow")
        sys.exit(1)
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    original_images = find_original_images()
    
    if not original_images:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(original_images)} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    total_original = 0
    total_optimized = 0
    total_webp = 0
    total_savings = 0
    
    results = {}
    
    for i, image_path in enumerate(original_images, 1):
        print(f"\n[{i}/{len(original_images)}]")
        result = optimize_single_image(image_path)
        if result:
            results[str(image_path)] = result
            total_original += result['original']['size']
            
            if 'optimized' in result:
                total_optimized += result['optimized']['size']
                total_savings += result['optimized']['savings']
            
            if 'webp' in result:
                total_webp += result['webp']['size']
    
    print("\n" + "=" * 60)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(original_images)}")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {format_size(total_original)}")
    print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {format_size(total_optimized)}")
    print(f"WebP –≤–µ—Ä—Å–∏–∏: {format_size(total_webp)}")
    print(f"–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {format_size(total_savings)} ({total_savings/total_original*100:.1f}%)")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebP –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤")
    print("4. –û–±–Ω–æ–≤–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
    
    return results

if __name__ == "__main__":
    main()
