#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—Ä–∑–∏–Ω—ã
"""

import os
import re
from pathlib import Path

def find_panel_usage():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"""
    
    # –ü–∞–Ω–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏
    panels = {
        'mini-cart-panel': '–î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –º–∏–Ω–∏-–∫–æ—Ä–∑–∏–Ω–∞',
        'mini-cart-panel-mobile': '–ú–æ–±–∏–ª—å–Ω–∞—è –º–∏–Ω–∏-–∫–æ—Ä–∑–∏–Ω–∞', 
        'user-panel': '–î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'user-panel-mobile': '–ú–æ–±–∏–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    }
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    analysis = {}
    
    # –ü–æ–∏—Å–∫ –≤ JavaScript —Ñ–∞–π–ª–∞—Ö
    js_files = list(Path('twocomms/twocomms_django_theme/static/js').glob('*.js'))
    
    for panel_id, description in panels.items():
        usage = {
            'description': description,
            'found_in_js': [],
            'found_in_css': [],
            'found_in_templates': [],
            'is_used': False
        }
        
        # –ü–æ–∏—Å–∫ –≤ JavaScript
        for js_file in js_files:
            try:
                with open(js_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if panel_id in content:
                        usage['found_in_js'].append(str(js_file))
                        usage['is_used'] = True
            except:
                pass
        
        # –ü–æ–∏—Å–∫ –≤ CSS
        css_files = list(Path('twocomms/twocomms_django_theme/static/css').glob('*.css'))
        for css_file in css_files:
            try:
                with open(css_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if panel_id in content:
                        usage['found_in_css'].append(str(css_file))
                        usage['is_used'] = True
            except:
                pass
        
        # –ü–æ–∏—Å–∫ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
        template_files = list(Path('twocomms/twocomms_django_theme/templates').rglob('*.html'))
        for template_file in template_files:
            try:
                with open(template_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if panel_id in content:
                        usage['found_in_templates'].append(str(template_file))
                        usage['is_used'] = True
            except:
                pass
        
        analysis[panel_id] = usage
    
    return analysis

def print_analysis():
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    analysis = find_panel_usage()
    
    print("=== –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ù–ï–õ–ï–ô ===\n")
    
    for panel_id, usage in analysis.items():
        print(f"üìã {usage['description']} (ID: {panel_id})")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {'‚úÖ –î–ê' if usage['is_used'] else '‚ùå –ù–ï–¢'}")
        
        if usage['found_in_js']:
            print(f"   üìÑ JavaScript: {len(usage['found_in_js'])} —Ñ–∞–π–ª–æ–≤")
            for file in usage['found_in_js']:
                print(f"      - {file}")
        
        if usage['found_in_css']:
            print(f"   üé® CSS: {len(usage['found_in_css'])} —Ñ–∞–π–ª–æ–≤")
            for file in usage['found_in_css']:
                print(f"      - {file}")
        
        if usage['found_in_templates']:
            print(f"   üìù –®–∞–±–ª–æ–Ω—ã: {len(usage['found_in_templates'])} —Ñ–∞–π–ª–æ–≤")
            for file in usage['found_in_templates']:
                print(f"      - {file}")
        
        print()

def find_unused_panels():
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞–Ω–µ–ª–∏"""
    analysis = find_panel_usage()
    
    unused = []
    for panel_id, usage in analysis.items():
        if not usage['is_used']:
            unused.append((panel_id, usage['description']))
    
    return unused

if __name__ == "__main__":
    print_analysis()
    
    unused = find_unused_panels()
    if unused:
        print("=== –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ü–ê–ù–ï–õ–ò ===")
        for panel_id, description in unused:
            print(f"‚ùå {description} (ID: {panel_id})")
    else:
        print("‚úÖ –í—Å–µ –ø–∞–Ω–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
