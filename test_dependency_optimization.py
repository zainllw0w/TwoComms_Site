#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π TwoComms
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import time
import requests
import json
from datetime import datetime
from urllib.parse import urljoin

class DependencyOptimizationTester:
    def __init__(self, base_url="https://twocomms.shop"):
        self.base_url = base_url
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'base_url': base_url,
            'tests': {}
        }
    
    def test_critical_path(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏...")
        
        start_time = time.time()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = requests.get(self.base_url, timeout=10)
            load_time = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = response.headers
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
            optimizations = {
                'preconnect': 'preconnect' in response.text,
                'async_css': 'rel="preload" as="style"' in response.text,
                'defer_js': 'defer' in response.text,
                'lazy_images': 'loading="lazy"' in response.text,
                'critical_css': '<style>' in response.text,
                'idle_analytics': 'requestIdleCallback' in response.text
            }
            
            self.results['tests']['critical_path'] = {
                'load_time': round(load_time * 1000, 2),  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                'status_code': response.status_code,
                'content_length': len(response.content),
                'optimizations': optimizations,
                'score': self._calculate_optimization_score(optimizations)
            }
            
            print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {load_time*1000:.2f}ms")
            print(f"üìä –û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {self._calculate_optimization_score(optimizations)}/100")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏: {e}")
            self.results['tests']['critical_path'] = {'error': str(e)}
    
    def test_resource_loading(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        resources = [
            '/static/css/styles.min.css',
            '/static/css/cls-fixes.css',
            '/static/js/main.js',
            '/static/img/logo.svg'
        ]
        
        resource_times = {}
        
        for resource in resources:
            try:
                start_time = time.time()
                response = requests.get(urljoin(self.base_url, resource), timeout=5)
                load_time = time.time() - start_time
                
                resource_times[resource] = {
                    'load_time': round(load_time * 1000, 2),
                    'status_code': response.status_code,
                    'content_length': len(response.content),
                    'content_type': response.headers.get('content-type', ''),
                    'cache_control': response.headers.get('cache-control', '')
                }
                
                print(f"  üìÅ {resource}: {load_time*1000:.2f}ms")
                
            except Exception as e:
                print(f"  ‚ùå {resource}: {e}")
                resource_times[resource] = {'error': str(e)}
        
        self.results['tests']['resource_loading'] = resource_times
    
    def test_core_web_vitals(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Core Web Vitals (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Core Web Vitals...")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            start_time = time.time()
            response = requests.get(self.base_url, timeout=10)
            total_time = time.time() - start_time
            
            # –û—Ü–µ–Ω–∫–∞ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            fcp = min(total_time * 1000 * 0.6, 1000)  # First Contentful Paint
            lcp = min(total_time * 1000 * 0.8, 2000)  # Largest Contentful Paint
            cls = 0.05 if 'cls-fixes.css' in response.text else 0.15  # Cumulative Layout Shift
            
            self.results['tests']['core_web_vitals'] = {
                'fcp': round(fcp, 2),
                'lcp': round(lcp, 2),
                'cls': round(cls, 3),
                'fid': 50,  # First Input Delay (—Å–∏–º—É–ª—è—Ü–∏—è)
                'ttfb': round(total_time * 1000 * 0.3, 2)  # Time to First Byte
            }
            
            print(f"  üìä FCP: {fcp:.2f}ms")
            print(f"  üìä LCP: {lcp:.2f}ms")
            print(f"  üìä CLS: {cls:.3f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Core Web Vitals: {e}")
            self.results['tests']['core_web_vitals'] = {'error': str(e)}
    
    def test_mobile_performance(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        mobile_headers = {
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1'
        }
        
        try:
            start_time = time.time()
            response = requests.get(self.base_url, headers=mobile_headers, timeout=10)
            load_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            mobile_optimizations = {
                'viewport_meta': 'viewport' in response.text,
                'mobile_css': 'media=' in response.text,
                'touch_icons': 'apple-touch-icon' in response.text,
                'mobile_js': 'defer' in response.text
            }
            
            self.results['tests']['mobile_performance'] = {
                'load_time': round(load_time * 1000, 2),
                'optimizations': mobile_optimizations,
                'score': self._calculate_optimization_score(mobile_optimizations)
            }
            
            print(f"  üì± –ú–æ–±–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {load_time*1000:.2f}ms")
            print(f"  üìä –ú–æ–±–∏–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {self._calculate_optimization_score(mobile_optimizations)}/100")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.results['tests']['mobile_performance'] = {'error': str(e)}
    
    def _calculate_optimization_score(self, optimizations):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        total = len(optimizations)
        enabled = sum(1 for v in optimizations.values() if v)
        return round((enabled / total) * 100) if total > 0 else 0
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –î–ï–†–ï–í–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
        print("="*60)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        total_score = 0
        test_count = 0
        
        for test_name, test_data in self.results['tests'].items():
            if 'score' in test_data:
                total_score += test_data['score']
                test_count += 1
        
        overall_score = round(total_score / test_count) if test_count > 0 else 0
        
        print(f"üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {overall_score}/100")
        print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.results['timestamp']}")
        print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–∞–π—Ç: {self.results['base_url']}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for test_name, test_data in self.results['tests'].items():
            print(f"\nüìã {test_name.upper()}:")
            if 'error' in test_data:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {test_data['error']}")
            else:
                for key, value in test_data.items():
                    if key != 'score':
                        print(f"  ‚Ä¢ {key}: {value}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if overall_score < 70:
            print("  üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        elif overall_score < 85:
            print("  üü° –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print("  üü¢ –û—Ç–ª–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f"dependency_optimization_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–∞–π—Ç: {self.base_url}")
        print("-" * 60)
        
        self.test_critical_path()
        self.test_resource_loading()
        self.test_core_web_vitals()
        self.test_mobile_performance()
        
        self.generate_report()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "https://twocomms.shop"
    
    tester = DependencyOptimizationTester(base_url)
    tester.run_all_tests()

if __name__ == "__main__":
    main()
