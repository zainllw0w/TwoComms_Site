#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ TwoComms
"""

import os
import sys
import django
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É Django
sys.path.append('/Users/zainllw0w/PycharmProjects/TwoComms/twocomms')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'twocomms.settings')
django.setup()

from storefront.models import Product, Category
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('performance_optimization.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def optimize_database_queries():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üóÑÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    total_products = Product.objects.count()
    total_categories = Category.objects.count()
    active_products = Product.objects.filter(category__is_active=True).count()
    
    logger.info(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {active_products}")
    logger.info(f"–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    products_without_images = Product.objects.filter(main_image__isnull=True).count()
    logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {products_without_images}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –±–æ–ª—å—à–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    products_with_large_images = Product.objects.filter(main_image__isnull=False).count()
    logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {products_with_large_images}")
    
    return {
        'total_products': total_products,
        'active_products': active_products,
        'total_categories': total_categories,
        'products_without_images': products_without_images,
        'products_with_large_images': products_with_large_images
    }

def optimize_static_files():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    logger.info("üìÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...")
    
    static_dir = '/Users/zainllw0w/PycharmProjects/TwoComms/twocomms/static'
    css_dir = os.path.join(static_dir, 'css')
    js_dir = os.path.join(static_dir, 'js')
    img_dir = os.path.join(static_dir, 'img')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã CSS —Ñ–∞–π–ª–æ–≤
    css_files = []
    if os.path.exists(css_dir):
        for file in os.listdir(css_dir):
            if file.endswith('.css'):
                file_path = os.path.join(css_dir, file)
                size = os.path.getsize(file_path)
                css_files.append({'name': file, 'size': size})
                logger.info(f"CSS —Ñ–∞–π–ª: {file} - {size / 1024:.1f} KiB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã JS —Ñ–∞–π–ª–æ–≤
    js_files = []
    if os.path.exists(js_dir):
        for file in os.listdir(js_dir):
            if file.endswith('.js'):
                file_path = os.path.join(js_dir, file)
                size = os.path.getsize(file_path)
                js_files.append({'name': file, 'size': size})
                logger.info(f"JS —Ñ–∞–π–ª: {file} - {size / 1024:.1f} KiB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    img_files = []
    if os.path.exists(img_dir):
        for file in os.listdir(img_dir):
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.svg', '.webp')):
                file_path = os.path.join(img_dir, file)
                size = os.path.getsize(file_path)
                img_files.append({'name': file, 'size': size})
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file} - {size / 1024:.1f} KiB")
    
    return {
        'css_files': css_files,
        'js_files': js_files,
        'img_files': img_files
    }

def optimize_media_files():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã"""
    logger.info("üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã...")
    
    media_dir = '/Users/zainllw0w/PycharmProjects/TwoComms/twocomms/media'
    products_dir = os.path.join(media_dir, 'products')
    category_icons_dir = os.path.join(media_dir, 'category_icons')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    product_images = []
    if os.path.exists(products_dir):
        for file in os.listdir(products_dir):
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                file_path = os.path.join(products_dir, file)
                size = os.path.getsize(file_path)
                product_images.append({'name': file, 'size': size})
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {file} - {size / 1024:.1f} KiB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_icons = []
    if os.path.exists(category_icons_dir):
        for file in os.listdir(category_icons_dir):
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                file_path = os.path.join(category_icons_dir, file)
                size = os.path.getsize(file_path)
                category_icons.append({'name': file, 'size': size})
                logger.info(f"–ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {file} - {size / 1024:.1f} KiB")
    
    return {
        'product_images': product_images,
        'category_icons': category_icons
    }

def generate_performance_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    db_stats = optimize_database_queries()
    static_stats = optimize_static_files()
    media_stats = optimize_media_files()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'database': db_stats,
        'static_files': static_stats,
        'media_files': media_stats,
        'recommendations': []
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    total_css_size = sum(f['size'] for f in static_stats['css_files'])
    total_js_size = sum(f['size'] for f in static_stats['js_files'])
    total_img_size = sum(f['size'] for f in static_stats['img_files'])
    
    if total_css_size > 500 * 1024:  # –ë–æ–ª—å—à–µ 500KB
        report['recommendations'].append({
            'type': 'css',
            'message': f'CSS —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ ({total_css_size / 1024:.1f} KiB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ/–Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏.',
            'priority': 'high'
        })
    
    if total_js_size > 200 * 1024:  # –ë–æ–ª—å—à–µ 200KB
        report['recommendations'].append({
            'type': 'js',
            'message': f'JS —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ ({total_js_size / 1024:.1f} KiB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞.',
            'priority': 'medium'
        })
    
    if total_img_size > 1000 * 1024:  # –ë–æ–ª—å—à–µ 1MB
        report['recommendations'].append({
            'type': 'images',
            'message': f'–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ ({total_img_size / 1024:.1f} KiB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP.',
            'priority': 'high'
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if db_stats['products_without_images'] > 0:
        report['recommendations'].append({
            'type': 'database',
            'message': f'{db_stats["products_without_images"]} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç.',
            'priority': 'medium'
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = f'performance_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    for i, rec in enumerate(report['recommendations'], 1):
        priority_emoji = "üî¥" if rec['priority'] == 'high' else "üü°" if rec['priority'] == 'medium' else "üü¢"
        logger.info(f"{i}. {priority_emoji} {rec['message']}")
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        report = generate_performance_report()
        
        logger.info("=" * 50)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 50)
        logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {report['database']['total_products']}")
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {report['database']['active_products']}")
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {report['database']['total_categories']}")
        logger.info(f"CSS —Ñ–∞–π–ª–æ–≤: {len(report['static_files']['css_files'])}")
        logger.info(f"JS —Ñ–∞–π–ª–æ–≤: {len(report['static_files']['js_files'])}")
        logger.info(f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(report['static_files']['img_files'])}")
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {len(report['media_files']['product_images'])}")
        logger.info(f"–ò–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(report['media_files']['category_icons'])}")
        logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(report['recommendations'])}")
        
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
