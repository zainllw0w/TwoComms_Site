#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
"""

import re
from pathlib import Path

def analyze_panel_duplication():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –∏ –º–æ–±–∏–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª—è–º–∏"""
    
    # –ß–∏—Ç–∞–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –ø–∞–Ω–µ–ª—å
    header_file = Path('twocomms/twocomms_django_theme/templates/partials/header.html')
    base_file = Path('twocomms/twocomms_django_theme/templates/base.html')
    
    with open(header_file, 'r', encoding='utf-8') as f:
        header_content = f.read()
    
    with open(base_file, 'r', encoding='utf-8') as f:
        base_content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –ø–∞–Ω–µ–ª—å
    desktop_panel_match = re.search(r'<div id="user-panel" class="user-panel">(.*?)</div>', header_content, re.DOTALL)
    if desktop_panel_match:
        desktop_panel = desktop_panel_match.group(1)
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        print("‚ùå –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –º–æ–±–∏–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
    mobile_panel_match = re.search(r'<div id="user-panel-mobile" class="user-panel d-none d-md-none">(.*?)</div>', base_content, re.DOTALL)
    if mobile_panel_match:
        mobile_panel = mobile_panel_match.group(1)
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–±–∏–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        print("‚ùå –ú–æ–±–∏–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
    print("\n=== –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===")
    
    # –£–±–∏—Ä–∞–µ–º whitespace –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    desktop_clean = re.sub(r'\s+', ' ', desktop_panel.strip())
    mobile_clean = re.sub(r'\s+', ' ', mobile_panel.strip())
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è
    differences = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    if 'data-user-close' in desktop_clean and 'data-user-close-mobile' in mobile_clean:
        differences.append("–†–∞–∑–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è")
    
    if 'loading="lazy"' in mobile_clean and 'loading="lazy"' not in desktop_clean:
        differences.append("–ú–æ–±–∏–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–º–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏")
    
    if 'fetchpriority="low"' in mobile_clean and 'fetchpriority="low"' not in desktop_clean:
        differences.append("–ú–æ–±–∏–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–º–µ–µ—Ç fetchpriority")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏—Å–∫—Ä
    desktop_sparks = desktop_clean.count('spark-')
    mobile_sparks = mobile_clean.count('spark-')
    
    if desktop_sparks != mobile_sparks:
        differences.append(f"–†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫—Ä: –¥–µ—Å–∫—Ç–æ–ø {desktop_sparks}, –º–æ–±–∏–ª—å–Ω–∞—è {mobile_sparks}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ –∏–∫–æ–Ω–æ–∫
    if 'width="24" height="24"' in desktop_clean and 'width="20" height="20"' in mobile_clean:
        differences.append("–†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫")
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–ª–∏—á–∏–π: {len(differences)}")
    for diff in differences:
        print(f"   - {diff}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
    desktop_size = len(desktop_clean)
    mobile_size = len(mobile_clean)
    duplication_percent = (min(desktop_size, mobile_size) / max(desktop_size, mobile_size)) * 100
    
    print(f"\nüìè –†–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–µ–π:")
    print(f"   –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è: {desktop_size} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –ú–æ–±–∏–ª—å–Ω–∞—è: {mobile_size} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: {duplication_percent:.1f}%")
    
    if duplication_percent > 80:
        print("\n‚ö†Ô∏è  –í–´–°–û–ö–û–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    elif duplication_percent > 60:
        print("\n‚ö†Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ. –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
    else:
        print("\n‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")

def find_hidden_elements():
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å"""
    
    base_file = Path('twocomms/twocomms_django_theme/templates/base.html')
    
    with open(base_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("\n=== –ü–û–ò–°–ö –°–ö–†–´–¢–´–• –≠–õ–ï–ú–ï–ù–¢–û–í ===")
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å display: none
    hidden_elements = re.findall(r'<[^>]*style="[^"]*display:\s*none[^"]*"[^>]*>.*?</[^>]+>', content, re.DOTALL)
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(hidden_elements)}")
    
    for i, element in enumerate(hidden_elements[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–ª–∏ –∫–ª–∞—Å—Å
        id_match = re.search(r'id="([^"]*)"', element)
        class_match = re.search(r'class="([^"]*)"', element)
        
        identifier = id_match.group(1) if id_match else class_match.group(1) if class_match else f"–≠–ª–µ–º–µ–Ω—Ç {i+1}"
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        lines = element.count('\n') + 1
        chars = len(element)
        
        print(f"   üì¶ {identifier}: {lines} —Å—Ç—Ä–æ–∫, {chars} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if len(hidden_elements) > 5:
        print(f"   ... –∏ –µ—â–µ {len(hidden_elements) - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

def check_unused_css():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ CSS –∫–ª–∞—Å—Å—ã"""
    
    css_file = Path('twocomms/twocomms_django_theme/static/css/styles.css')
    
    with open(css_file, 'r', encoding='utf-8') as f:
        css_content = f.read()
    
    print("\n=== –ê–ù–ê–õ–ò–ó CSS ===")
    
    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–∞–Ω–µ–ª–µ–π
    panel_classes = [
        '.user-panel',
        '.user-header', 
        '.user-avatar-large',
        '.user-info',
        '.user-menu',
        '.menu-item',
        '.points-card',
        '.sparks-container',
        '.spark'
    ]
    
    total_css_size = len(css_content)
    panel_css_size = 0
    
    for class_name in panel_classes:
        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
        pattern = rf'{re.escape(class_name)}\s*\{{[^}}]*\}}'
        matches = re.findall(pattern, css_content, re.DOTALL)
        
        if matches:
            class_size = sum(len(match) for match in matches)
            panel_css_size += class_size
            print(f"   üé® {class_name}: {class_size} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"\nüìä CSS –¥–ª—è –ø–∞–Ω–µ–ª–µ–π: {panel_css_size} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {total_css_size}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {(panel_css_size/total_css_size)*100:.1f}%")

if __name__ == "__main__":
    print("üîç –ê–ù–ê–õ–ò–ó –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–ê–ù–ï–õ–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n")
    
    analyze_panel_duplication()
    find_hidden_elements()
    check_unused_css()
    
    print("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
    print("1. ‚úÖ –í—Å–µ –ø–∞–Ω–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è - —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
    print("2. ‚ö†Ô∏è  –ï—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –∏ –º–æ–±–∏–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª—è–º–∏")
    print("3. üí° –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π template –¥–ª—è –ø–∞–Ω–µ–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("4. üßπ –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã favorites (—É–∂–µ —Å–∫—Ä—ã—Ç—ã)")
    print("5. üì¶ CSS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
