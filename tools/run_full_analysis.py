#!/usr/bin/env python3
"""
Full Performance Analysis Runner
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ TwoComms
"""

import os
import sys
import time
import subprocess
from pathlib import Path

def run_analysis_script(script_path: str, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"\n{'='*60}")
    print(f"–ó–∞–ø—É—Å–∫: {description}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run([sys.executable, script_path], 
                              capture_output=True, 
                              text=True, 
                              cwd=os.path.dirname(script_path))
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
            if result.stdout:
                print("–í—ã–≤–æ–¥:")
                print(result.stdout)
            return True
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
            if result.stderr:
                print("–û—à–∏–±–∫–∏:")
                print(result.stderr)
            if result.stdout:
                print("–í—ã–≤–æ–¥:")
                print(result.stdout)
            return False
            
    except Exception as e:
        print(f"‚ùå {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\n" + "="*60)
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("="*60)
    
    requirements = [
        "requests",
        "Pillow",
        "openai"
    ]
    
    for req in requirements:
        try:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {req}...")
            subprocess.run([sys.executable, "-m", "pip", "install", req], 
                         check=True, capture_output=True)
            print(f"‚úÖ {req} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {req}: {e}")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TwoComms")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    tools_dir = Path(__file__).parent
    project_root = tools_dir.parent
    
    # –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    analysis_scripts = [
        {
            "script": tools_dir / "css_performance_analyzer.py",
            "description": "–ê–Ω–∞–ª–∏–∑ CSS –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        },
        {
            "script": tools_dir / "js_performance_analyzer.py", 
            "description": "–ê–Ω–∞–ª–∏–∑ JavaScript –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        },
        {
            "script": tools_dir / "django_performance_analyzer_simple.py",
            "description": "–ê–Ω–∞–ª–∏–∑ Django –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        },
        {
            "script": tools_dir / "media_performance_analyzer.py",
            "description": "–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"
        },
        {
            "script": tools_dir / "network_performance_analyzer.py",
            "description": "–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        },
        {
            "script": tools_dir / "ai_performance_analyzer.py",
            "description": "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        }
    ]
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_requirements():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö...")
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    successful_analyses = 0
    failed_analyses = 0
    
    for analysis in analysis_scripts:
        if analysis["script"].exists():
            success = run_analysis_script(str(analysis["script"]), analysis["description"])
            if success:
                successful_analyses += 1
            else:
                failed_analyses += 1
        else:
            print(f"‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {analysis['script']}")
            failed_analyses += 1
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print(f"\n{'='*60}")
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    print(f"{'='*60}")
    
    report_script = tools_dir / "report_generator.py"
    if report_script.exists():
        success = run_analysis_script(str(report_script), "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
        if success:
            print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    else:
        print("‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*60}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {successful_analyses}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {failed_analyses}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {successful_analyses + failed_analyses}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–∏—Å–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print(f"\n{'='*60}")
    print("–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´")
    print(f"{'='*60}")
    
    analysis_files = [
        "css_performance_analysis.json",
        "js_performance_analysis.json",
        "django_performance_analysis.json", 
        "media_performance_analysis.json",
        "network_performance_analysis.json",
        "ai_performance_analysis.json"
    ]
    
    report_files = list(project_root.glob("performance_analysis_report_*.md"))
    
    print("–§–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞:")
    for file in analysis_files:
        file_path = project_root / file
        if file_path.exists():
            size = file_path.stat().st_size
            print(f"‚úÖ {file} ({size} –±–∞–π—Ç)")
        else:
            print(f"‚ùå {file} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print("\n–û—Ç—á–µ—Ç—ã:")
    for file in report_files:
        size = file.stat().st_size
        print(f"‚úÖ {file.name} ({size} –±–∞–π—Ç)")
    
    if successful_analyses > 0:
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ {project_root}")
    else:
        print(f"\nüòû –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
