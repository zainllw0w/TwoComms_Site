#!/usr/bin/env python3
"""
Deploy and Analyze Script
–î–µ–ø–ª–æ–∏—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑
"""

import os
import subprocess
import time
from pathlib import Path

class ServerDeployer:
    def __init__(self):
        self.ssh_host = "195.191.24.169"
        self.ssh_user = "qlknpodo"
        self.ssh_password = "trs5m4t1"
        self.project_path = "/home/qlknpodo/TWC/TwoComms_Site/twocomms"
        self.venv_path = "/home/qlknpodo/virtualenv/TWC/TwoComms_Site/twocomms/3.13/bin/activate"
        
    def run_ssh_command(self, command: str) -> tuple:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SSH"""
        ssh_cmd = [
            "/opt/homebrew/bin/sshpass", "-p", self.ssh_password,
            "ssh", "-o", "StrictHostKeyChecking=no",
            f"{self.ssh_user}@{self.ssh_host}",
            f"bash -lc 'source {self.venv_path} && cd {self.project_path} && {command}'"
        ]
        
        try:
            result = subprocess.run(ssh_cmd, capture_output=True, text=True, timeout=300)
            return result.returncode == 0, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return False, "", "Command timed out"
        except Exception as e:
            return False, "", str(e)
    
    def upload_file(self, local_path: str, remote_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        scp_cmd = [
            "/opt/homebrew/bin/sshpass", "-p", self.ssh_password,
            "scp", "-o", "StrictHostKeyChecking=no",
            local_path,
            f"{self.ssh_user}@{self.ssh_host}:{remote_path}"
        ]
        
        try:
            result = subprocess.run(scp_cmd, capture_output=True, text=True, timeout=60)
            return result.returncode == 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {local_path}: {e}")
            return False
    
    def deploy_analysis_tools(self) -> bool:
        """–î–µ–ø–ª–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –î–µ–ø–ª–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tools –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        success, stdout, stderr = self.run_ssh_command("mkdir -p tools")
        if not success:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tools: {stderr}")
            return False
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        tools_dir = Path(__file__).parent
        files_to_upload = [
            "css_performance_analyzer.py",
            "js_performance_analyzer.py", 
            "django_performance_analyzer.py",
            "media_performance_analyzer.py",
            "network_performance_analyzer.py",
            "ai_performance_analyzer.py",
            "report_generator.py",
            "run_full_analysis.py"
        ]
        
        uploaded_files = 0
        for filename in files_to_upload:
            local_file = tools_dir / filename
            if local_file.exists():
                remote_file = f"{self.project_path}/tools/{filename}"
                if self.upload_file(str(local_file), remote_file):
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {filename}")
                    uploaded_files += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {filename}")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploaded_files}/{len(files_to_upload)}")
        return uploaded_files > 0
    
    def install_server_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        
        dependencies = [
            "requests",
            "Pillow", 
            "openai"
        ]
        
        for dep in dependencies:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {dep}...")
            success, stdout, stderr = self.run_ssh_command(f"pip install {dep}")
            if success:
                print(f"‚úÖ {dep} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {dep}: {stderr}")
                return False
        
        return True
    
    def run_analysis_on_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
        print("–û–±–Ω–æ–≤–ª—è—é –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        success, stdout, stderr = self.run_ssh_command("git pull")
        if not success:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞: {stderr}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_script = f"{self.project_path}/tools/run_full_analysis.py"
        success, stdout, stderr = self.run_ssh_command(f"python {analysis_script}")
        
        if success:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("–í—ã–≤–æ–¥:")
            print(stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
            print("–û—à–∏–±–∫–∏:")
            print(stderr)
            if stdout:
                print("–í—ã–≤–æ–¥:")
                print(stdout)
        
        return success
    
    def download_results(self) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        result_files = [
            "css_performance_analysis.json",
            "js_performance_analysis.json",
            "django_performance_analysis.json",
            "media_performance_analysis.json", 
            "network_performance_analysis.json",
            "ai_performance_analysis.json"
        ]
        
        # –ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤
        success, stdout, stderr = self.run_ssh_command("find . -name 'performance_analysis_report_*.md' -type f")
        if success and stdout.strip():
            report_files = stdout.strip().split('\n')
            result_files.extend(report_files)
        
        downloaded_files = 0
        for filename in result_files:
            remote_file = f"{self.project_path}/{filename}"
            local_file = f"/Users/zainllw0w/PycharmProjects/TwoComms/{os.path.basename(filename)}"
            
            scp_cmd = [
                "/opt/homebrew/bin/sshpass", "-p", self.ssh_password,
                "scp", "-o", "StrictHostKeyChecking=no",
                f"{self.ssh_user}@{self.ssh_host}:{remote_file}",
                local_file
            ]
            
            try:
                result = subprocess.run(scp_cmd, capture_output=True, text=True, timeout=60)
                if result.returncode == 0:
                    print(f"‚úÖ –°–∫–∞—á–∞–Ω: {filename}")
                    downloaded_files += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {result.stderr}")
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {e}")
        
        print(f"üìä –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {downloaded_files}/{len(result_files)}")
        return downloaded_files > 0
    
    def run_full_deployment(self) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è –∏ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–ø–ª–æ—è –∏ –∞–Ω–∞–ª–∏–∑–∞")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        steps = [
            ("–î–µ–ø–ª–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", self.deploy_analysis_tools),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_server_dependencies),
            ("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞", self.run_analysis_on_server),
            ("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", self.download_results)
        ]
        
        successful_steps = 0
        for step_name, step_function in steps:
            print(f"\n{'='*60}")
            print(f"–®–∞–≥: {step_name}")
            print(f"{'='*60}")
            
            try:
                if step_function():
                    print(f"‚úÖ {step_name} - –£–°–ü–ï–®–ù–û")
                    successful_steps += 1
                else:
                    print(f"‚ùå {step_name} - –û–®–ò–ë–ö–ê")
            except Exception as e:
                print(f"‚ùå {step_name} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        print(f"\n{'='*60}")
        print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{'='*60}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: {successful_steps}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —à–∞–≥–æ–≤: {len(steps) - successful_steps}")
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {len(steps)}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        if successful_steps == len(steps):
            print("\nüéâ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"\nüòû –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏. –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {successful_steps}/{len(steps)} —à–∞–≥–æ–≤.")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    deployer = ServerDeployer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    try:
        subprocess.run(["/opt/homebrew/bin/sshpass", "-V"], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå sshpass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SSH:")
        print("   macOS: brew install hudochenkov/sshpass/sshpass")
        print("   Ubuntu: sudo apt-get install sshpass")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    success = deployer.run_full_deployment()
    
    if success:
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("   - performance_analysis_report_*.md - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
        print("   - *_performance_analysis.json - –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞")
    else:
        print("\nüîß –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print(f"   /opt/homebrew/bin/sshpass -p '{deployer.ssh_password}' ssh -o StrictHostKeyChecking=no {deployer.ssh_user}@{deployer.ssh_host}")
        print(f"   'bash -lc \"source {deployer.venv_path} && cd {deployer.project_path} && python tools/run_full_analysis.py\"'")

if __name__ == "__main__":
    main()
