#!/usr/bin/env python3
"""
Image Optimization Script –¥–ª—è TwoComms
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ media/products
"""
import argparse
import os
import sys
from pathlib import Path

from PIL import Image

def get_image_size_kb(path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ KB"""
    return os.path.getsize(path) / 1024

def optimize_image(image_path, quality=85, max_width=1920, max_height=1920):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    Args:
        image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        quality: –∫–∞—á–µ—Å—Ç–≤–æ JPEG (0-100)
        max_width: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        max_height: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    try:
        original_size = get_image_size_kb(image_path)
        
        # –û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(image_path)
        original_format = img.format
        original_dimensions = img.size
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if img.mode in ('RGBA', 'LA', 'P'):
            bg = Image.new('RGB', img.size, (255, 255, 255))
            if 'A' in img.mode:
                bg.paste(img, mask=img.split()[-1])
            else:
                bg.paste(img)
            img = bg
        
        # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        resized = False
        if img.size[0] > max_width or img.size[1] > max_height:
            img.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
            resized = True
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JPEG
        img.save(
            image_path,
            'JPEG',
            quality=quality,
            optimize=True,
            progressive=True
        )
        
        # –°–æ–∑–¥–∞—Ç—å WebP –≤–µ—Ä—Å–∏—é
        webp_path = os.path.splitext(image_path)[0] + '.webp'
        img.save(webp_path, 'WEBP', quality=quality, method=6)
        
        new_size = get_image_size_kb(image_path)
        webp_size = get_image_size_kb(webp_path)
        
        return {
            'success': True,
            'original_size': original_size,
            'new_size': new_size,
            'webp_size': webp_size,
            'saved': original_size - new_size,
            'saved_percent': ((original_size - new_size) / original_size * 100) if original_size > 0 else 0,
            'resized': resized,
            'original_dimensions': original_dimensions,
            'new_dimensions': img.size,
            'webp_created': True
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

def format_size(kb):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if kb < 1024:
        return f"{kb:.1f} KB"
    else:
        return f"{kb/1024:.1f} MB"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è TwoComms.")
    parser.add_argument("--yes", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É.")
    parser.add_argument("--quality", type=int, default=85, help="–ö–∞—á–µ—Å—Ç–≤–æ JPEG (0-100).")
    parser.add_argument("--max-width", type=int, default=1920, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    parser.add_argument("--max-height", type=int, default=1920, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    parser.add_argument(
        "--min-size-kb",
        type=float,
        default=0,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ KB –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—Å—ë).",
    )
    parser.add_argument(
        "--limit",
        type=int,
        default=0,
        help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π).",
    )

    args = parser.parse_args()

    print("üñºÔ∏è  Image Optimization –¥–ª—è TwoComms")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ media/products
    base_dir = Path(__file__).parent
    media_dir = base_dir / 'twocomms' / 'media' / 'products'
    
    if not media_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {media_dir}")
        sys.exit(1)
    
    print(f"üìÅ –ü–∞–ø–∫–∞: {media_dir}\n")
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    extensions = ('*.jpg', '*.jpeg', '*.JPG', '*.JPEG')
    images = []
    for ext in extensions:
        images.extend(media_dir.rglob(ext))

    # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if args.min_size_kb > 0:
        images = [
            path for path in images
            if get_image_size_kb(str(path)) >= args.min_size_kb
        ]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–µ —Å–Ω–∞—á–∞–ª–∞), —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ —É–º–µ–Ω—å—à–∏—Ç—å LCP
    images.sort(key=lambda p: get_image_size_kb(str(p)), reverse=True)

    if args.limit:
        images = images[:max(args.limit, 0)]
    
    if not images:
        print("‚ÑπÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(0)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}\n")
    
    # –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not args.yes:
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é? (y/n): ").strip().lower()
        if response not in ('y', 'yes'):
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            sys.exit(0)
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    total_images = len(images)
    optimized = 0
    failed = 0
    total_saved_kb = 0
    
    for i, image_path in enumerate(images, 1):
        print(f"\n[{i}/{total_images}] {image_path.name}")
        print(f"  –†–∞–∑–º–µ—Ä: {format_size(get_image_size_kb(str(image_path)))}", end=" ‚Üí ")
        
        result = optimize_image(
            str(image_path),
            quality=max(1, min(args.quality, 100)),
            max_width=max(1, args.max_width),
            max_height=max(1, args.max_height),
        )
        
        if result['success']:
            print(f"{format_size(result['new_size'])}")
            print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {format_size(result['saved'])} ({result['saved_percent']:.1f}%)")
            print(f"  üìê –†–∞–∑–º–µ—Ä: {result['original_dimensions']} ‚Üí {result['new_dimensions']}")
            print(f"  üåê WebP: {format_size(result['webp_size'])}")
            
            optimized += 1
            total_saved_kb += result['saved']
        else:
            print(f"\n  ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            failed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò:")
    print(f"  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {optimized}/{total_images}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"  üíæ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {format_size(total_saved_kb)}")
    
    if optimized > 0:
        avg_saved = (total_saved_kb / optimized)
        print(f"  üìâ –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è: {format_size(avg_saved)} ({(avg_saved/800*100):.1f}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)")
    
    print("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("  2. –û–±–Ω–æ–≤–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebP —Å fallback –Ω–∞ JPEG")
    print("  3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CDN –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    sys.exit(0)

if __name__ == '__main__':
    main()
