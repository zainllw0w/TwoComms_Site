#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ CSS –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∏–ª–∏ –∏ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç CSS
"""

import os
import re
import gzip
from pathlib import Path

def minify_css(css_content):
    """–ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç CSS –∫–æ–¥"""
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    css_content = re.sub(r'/\*.*?\*/', '', css_content, flags=re.DOTALL)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    css_content = re.sub(r'\s+', ' ', css_content)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    css_content = re.sub(r'\s*([{}:;,>+~])\s*', r'\1', css_content)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    css_content = css_content.strip()
    
    return css_content

def extract_critical_css(css_content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ CSS —Å—Ç–∏–ª–∏"""
    critical_selectors = [
        'body', 'html', '*', '.navbar', '.hero-section', '.container',
        '.btn', '.card', '.loading', 'h1', 'h2', 'h3', 'p', 'a'
    ]
    
    critical_css = []
    lines = css_content.split('\n')
    
    for line in lines:
        line = line.strip()
        if not line or line.startswith('/*'):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        for selector in critical_selectors:
            if selector in line:
                critical_css.append(line)
                break
    
    return '\n'.join(critical_css)

def optimize_css_file(file_path):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç CSS —Ñ–∞–π–ª"""
    print(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {file_path}...")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º CSS
        minified = minify_css(content)
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        minified_path = file_path.replace('.css', '.min.css')
        with open(minified_path, 'w', encoding='utf-8') as f:
            f.write(minified)
        
        # –°–æ–∑–¥–∞–µ–º gzip –≤–µ—Ä—Å–∏—é
        gzip_path = minified_path + '.gz'
        with gzip.open(gzip_path, 'wt', encoding='utf-8') as f:
            f.write(minified)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS
        critical_css = extract_critical_css(content)
        critical_path = file_path.replace('.css', '.critical.css')
        with open(critical_path, 'w', encoding='utf-8') as f:
            f.write(critical_css)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        original_size = len(content)
        minified_size = len(minified)
        gzip_size = os.path.getsize(gzip_path)
        critical_size = len(critical_css)
        
        print(f"  ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª: {original_size:,} –±–∞–π—Ç")
        print(f"  ‚úÖ –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {minified_size:,} –±–∞–π—Ç ({minified_size/original_size*100:.1f}%)")
        print(f"  ‚úÖ Gzip: {gzip_size:,} –±–∞–π—Ç ({gzip_size/original_size*100:.1f}%)")
        print(f"  ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: {critical_size:,} –±–∞–π—Ç ({critical_size/original_size*100:.1f}%)")
        
        return {
            'original': original_size,
            'minified': minified_size,
            'gzip': gzip_size,
            'critical': critical_size
        }
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è TwoComms")
    print("=" * 60)
    
    # –ü—É—Ç–∏ –∫ CSS —Ñ–∞–π–ª–∞–º
    css_files = [
        'twocomms/static/css/styles.css',
        'twocomms/static/css/critical.css'
    ]
    
    total_original = 0
    total_minified = 0
    total_gzip = 0
    total_critical = 0
    
    for css_file in css_files:
        if os.path.exists(css_file):
            result = optimize_css_file(css_file)
            if result:
                total_original += result['original']
                total_minified += result['minified']
                total_gzip += result['gzip']
                total_critical += result['critical']
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {css_file}")
    
    print("\n" + "=" * 60)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {total_original:,} –±–∞–π—Ç")
    print(f"–ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {total_minified:,} –±–∞–π—Ç ({total_minified/total_original*100:.1f}%)")
    print(f"Gzip —Å–∂–∞—Ç–∏–µ: {total_gzip:,} –±–∞–π—Ç ({total_gzip/total_original*100:.1f}%)")
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS: {total_critical:,} –±–∞–π—Ç ({total_critical/total_original*100:.1f}%)")
    
    savings = total_original - total_gzip
    print(f"\nüí∞ –≠–∫–æ–Ω–æ–º–∏—è: {savings:,} –±–∞–π—Ç ({savings/total_original*100:.1f}%)")
    
    print("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .min.css —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    print("2. –í–∫–ª—é—á–∏—Ç–µ gzip —Å–∂–∞—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print("3. –í—Å—Ç—Ä–æ–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –≤ <head>")
    print("4. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π CSS –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")

if __name__ == "__main__":
    main()
