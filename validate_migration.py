#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –º—ñ–≥—Ä–∞—Ü—ñ—ó views.py ‚Üí –º–æ–¥—É–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.

–ü–µ—Ä–µ–≤—ñ—Ä—è—î:
1. –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ __init__.py
2. Backward compatibility –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
3. –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
4. –ö–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å _exclude —Å–ø–∏—Å–∫—É
5. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é __all__ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
"""

import sys
import os
from pathlib import Path
import importlib.util
from typing import Set, Dict, List, Tuple
from collections import defaultdict

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ Django –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = Path(__file__).parent / 'twocomms'
sys.path.insert(0, str(PROJECT_ROOT.parent))

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text: str):
    """–î—Ä—É–∫ –∑–∞–≥–æ–ª–æ–≤–∫—É."""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{text.center(80)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*80}{Colors.END}\n")

def print_success(text: str):
    """–î—Ä—É–∫ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_warning(text: str):
    """–î—Ä—É–∫ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è."""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.END}")

def print_error(text: str):
    """–î—Ä—É–∫ –ø–æ–º–∏–ª–∫–∏."""
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")

def print_info(text: str):
    """–î—Ä—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    print(f"{Colors.CYAN}‚ÑπÔ∏è  {text}{Colors.END}")

def get_functions_from_module(module_path: Path) -> Set[str]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π –∑ Python –º–æ–¥—É–ª—è."""
    functions = set()
    
    try:
        with open(module_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –®—É–∫–∞—î–º–æ –≤—Å—ñ def —Ñ—É–Ω–∫—Ü—ñ—ó (–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ñ, –Ω–µ –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—ñ–≤)
        import re
        pattern = r'^def ([a-z_][a-z0-9_]*)\s*\('
        matches = re.findall(pattern, content, re.MULTILINE)
        functions.update(matches)
        
        # –®—É–∫–∞—î–º–æ –∫–ª–∞—Å–∏ (—Ñ–æ—Ä–º–∏, —Ç–æ—â–æ)
        class_pattern = r'^class ([A-Z][a-zA-Z0-9_]*)\s*\('
        class_matches = re.findall(class_pattern, content, re.MULTILINE)
        functions.update(class_matches)
        
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {module_path}: {e}")
    
    return functions

def check_module_exports(views_dir: Path) -> Dict[str, Set[str]]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è."""
    print_header("üì¶ –ê–ù–ê–õ–Ü–ó –ú–û–î–£–õ–Ü–í")
    
    module_exports = {}
    
    # –ú–æ–¥—É–ª—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    modules = [
        'monobank.py',
        'wholesale.py', 
        'admin.py',
        'stores.py',
        'dropship.py',
        'cart.py',
        'api.py',
        'auth.py',
        'catalog.py',
        'checkout.py',
        'product.py',
        'profile.py',
        'static_pages.py',
        'utils.py'
    ]
    
    for module_name in modules:
        module_path = views_dir / module_name
        if module_path.exists():
            functions = get_functions_from_module(module_path)
            module_exports[module_name] = functions
            print_info(f"{module_name:20} ‚Üí {len(functions):3} —Ñ—É–Ω–∫—Ü—ñ–π/–∫–ª–∞—Å—ñ–≤")
        else:
            print_warning(f"{module_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    total_exports = sum(len(funcs) for funcs in module_exports.values())
    print_success(f"–í—Å—å–æ–≥–æ –µ–∫—Å–ø–æ—Ä—Ç—ñ–≤: {total_exports}")
    
    return module_exports

def check_init_imports(views_dir: Path, module_exports: Dict[str, Set[str]]) -> Tuple[Set[str], Set[str], Set[str]]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç–∏ –≤ __init__.py."""
    print_header("üìã –ü–ï–†–ï–í–Ü–†–ö–ê __init__.py")
    
    init_path = views_dir / '__init__.py'
    
    if not init_path.exists():
        print_error("__init__.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return set(), set(), set()
    
    with open(init_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∑ –º–æ–¥—É–ª—ñ–≤
    import re
    
    # –Ü–º–ø–æ—Ä—Ç–∏ —Ç–∏–ø—É: from .module import func1, func2
    from_imports = set()
    pattern = r'from \.\w+ import \((.*?)\)'
    matches = re.findall(pattern, content, re.DOTALL)
    for match in matches:
        imports = [imp.strip() for imp in match.split(',') if imp.strip() and not imp.strip().startswith('#')]
        from_imports.update(imports)
    
    # –¢–∞–∫–æ–∂ –æ–¥–Ω–æ-—Ä—è–¥–∫–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏
    single_pattern = r'from \.\w+ import ([a-zA-Z_][\w, ]*)'
    single_matches = re.findall(single_pattern, content)
    for match in single_matches:
        if '(' not in match:
            imports = [imp.strip() for imp in match.split(',') if imp.strip()]
            from_imports.update(imports)
    
    # –®—É–∫–∞—î–º–æ _exclude —Å–ø–∏—Å–æ–∫
    exclude_set = set()
    exclude_pattern = r'_exclude\s*=\s*\{(.*?)\}'
    exclude_match = re.search(exclude_pattern, content, re.DOTALL)
    if exclude_match:
        exclude_content = exclude_match.group(1)
        # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –≤ –ª–∞–ø–∫–∞—Ö
        exclude_items = re.findall(r"['\"]([^'\"]+)['\"]", exclude_content)
        exclude_set.update(exclude_items)
    
    # –®—É–∫–∞—î–º–æ __all__ —Å–ø–∏—Å–æ–∫
    all_set = set()
    all_pattern = r'__all__\s*=\s*\[(.*?)\]'
    all_match = re.search(all_pattern, content, re.DOTALL)
    if all_match:
        all_content = all_match.group(1)
        all_items = re.findall(r"['\"]([^'\"]+)['\"]", all_content)
        all_set.update(all_items)
    
    print_info(f"–Ü–º–ø–æ—Ä—Ç—ñ–≤ –∑ –º–æ–¥—É–ª—ñ–≤: {len(from_imports)}")
    print_info(f"–§—É–Ω–∫—Ü—ñ–π –≤ _exclude: {len(exclude_set)}")
    print_info(f"–§—É–Ω–∫—Ü—ñ–π –≤ __all__: {len(all_set)}")
    
    return from_imports, exclude_set, all_set

def validate_consistency(module_exports: Dict[str, Set[str]], from_imports: Set[str], exclude_set: Set[str], all_set: Set[str]):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å –º—ñ–∂ –º–æ–¥—É–ª—è–º–∏ —Ç–∞ __init__.py."""
    print_header("üîç –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–Ü")
    
    errors = []
    warnings = []
    
    # –í—Å—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏ –∑ –º–æ–¥—É–ª—ñ–≤
    all_module_exports = set()
    for funcs in module_exports.values():
        all_module_exports.update(funcs)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –≤—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ —ñ—Å–Ω—É—é—Ç—å –≤ –º–æ–¥—É–ª—è—Ö
    missing_in_modules = from_imports - all_module_exports
    if missing_in_modules:
        errors.append(f"–§—É–Ω–∫—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è –≤ __init__.py, –∞–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –º–æ–¥—É–ª—è—Ö: {missing_in_modules}")
    else:
        print_success("–í—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –º–æ–¥—É–ª—è—Ö")
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –≤—Å—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏ —î –≤ __init__.py
    not_imported = all_module_exports - from_imports
    if not_imported:
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        public_not_imported = {f for f in not_imported if not f.startswith('_')}
        if public_not_imported:
            warnings.append(f"–ü—É–±–ª—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –º–æ–¥—É–ª—è—Ö, –∞–ª–µ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤ __init__.py: {public_not_imported}")
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: _exclude –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏
    not_excluded = from_imports - exclude_set
    if not_excluded:
        warnings.append(f"–§—É–Ω–∫—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è, –∞–ª–µ –Ω–µ –≤ _exclude —Å–ø–∏—Å–∫—É: {not_excluded}")
    else:
        print_success("–í—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–æ–¥–∞–Ω—ñ –≤ _exclude —Å–ø–∏—Å–æ–∫")
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: __all__ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏
    not_in_all = from_imports - all_set
    if not_in_all:
        errors.append(f"–§—É–Ω–∫—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è, –∞–ª–µ –Ω–µ –≤ __all__ —Å–ø–∏—Å–∫—É: {not_in_all}")
    else:
        print_success("–í—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–æ–¥–∞–Ω—ñ –≤ __all__ —Å–ø–∏—Å–æ–∫")
    
    # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: __all__ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–π–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    extra_in_all = all_set - from_imports
    if extra_in_all:
        # –¶–µ –º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–∞—Ä–∏–π views.py
        print_info(f"–§—É–Ω–∫—Ü—ñ—ó –≤ __all__, –∞–ª–µ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑ –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤ (–º–æ–∂–ª–∏–≤–æ –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ views.py): {len(extra_in_all)}")
    
    return errors, warnings

def check_backward_compatibility(views_dir: Path):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ backward compatibility."""
    print_header("üîÑ BACKWARD COMPATIBILITY")
    
    # –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
    critical_functions = [
        # Monobank
        'monobank_create_invoice',
        'monobank_create_checkout',
        'monobank_webhook',
        'monobank_return',
        # Wholesale
        'wholesale_page',
        'wholesale_order_form',
        'wholesale_prices_xlsx',
        # Admin
        'admin_panel',
        'admin_product_new',
        'admin_category_new',
        # Stores
        'admin_offline_stores',
        'admin_store_management',
        # Dropship
        'admin_update_dropship_status',
        # Cart
        'apply_promo_code',
        'remove_promo_code',
        # API
        'api_colors',
    ]
    
    try:
        # –ù–∞–º–∞–≥–∞—î–º–æ—Å—å —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑ storefront.views
        sys.path.insert(0, str(views_dir.parent.parent))
        
        missing_functions = []
        for func_name in critical_functions:
            try:
                # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
                module = __import__('storefront.views', fromlist=[func_name])
                if not hasattr(module, func_name):
                    missing_functions.append(func_name)
            except Exception as e:
                print_warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—å —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ {func_name}: {e}")
                missing_functions.append(func_name)
        
        if missing_functions:
            print_error(f"–ö—Ä–∏—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {missing_functions}")
            return False
        else:
            print_success(f"–í—Å—ñ {len(critical_functions)} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–æ—Å—Ç—É–ø–Ω—ñ")
            return True
            
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ backward compatibility: {e}")
        return False

def check_duplicates(module_exports: Dict[str, Set[str]]):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–π –º—ñ–∂ –º–æ–¥—É–ª—è–º–∏."""
    print_header("üîé –ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í")
    
    function_locations = defaultdict(list)
    
    for module_name, functions in module_exports.items():
        for func in functions:
            function_locations[func].append(module_name)
    
    duplicates = {func: modules for func, modules in function_locations.items() if len(modules) > 1}
    
    if duplicates:
        print_warning(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤:")
        for func, modules in sorted(duplicates.items()):
            print(f"  ‚Ä¢ {func}: {', '.join(modules)}")
    else:
        print_success("–î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    return duplicates

def generate_summary(module_exports: Dict[str, Set[str]], from_imports: Set[str], errors: List[str], warnings: List[str]):
    """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç."""
    print_header("üìä –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢")
    
    total_module_functions = sum(len(funcs) for funcs in module_exports.values())
    
    print(f"{Colors.BOLD}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.END}")
    print(f"  ‚Ä¢ –ú–æ–¥—É–ª—ñ–≤ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {len(module_exports)}")
    print(f"  ‚Ä¢ –í—Å—å–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–π –≤ –º–æ–¥—É–ª—è—Ö: {total_module_functions}")
    print(f"  ‚Ä¢ –§—É–Ω–∫—Ü—ñ–π —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ __init__.py: {len(from_imports)}")
    
    print(f"\n{Colors.BOLD}–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:{Colors.END}")
    
    if errors:
        print_error(f"–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫: {len(errors)}")
        for i, error in enumerate(errors, 1):
            print(f"  {i}. {error}")
    else:
        print_success("–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    if warnings:
        print_warning(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: {len(warnings)}")
        for i, warning in enumerate(warnings, 1):
            print(f"  {i}. {warning}")
    else:
        print_success("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –Ω–µ–º–∞—î")
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    print(f"\n{Colors.BOLD}–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:{Colors.END}")
    if not errors:
        print_success("‚ú® –ú–Ü–ì–†–ê–¶–Ü–Ø –í–ê–õ–Ü–î–ù–ê ‚ú®")
        return True
    else:
        print_error("‚ö†Ô∏è –ü–û–¢–†–Ü–ë–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ‚ö†Ô∏è")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    print(f"{Colors.BOLD}{Colors.CYAN}")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                    –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ú–Ü–ì–†–ê–¶–Ü–á VIEWS.PY                             ‚ïë")
    print("‚ïë                         TwoComms E-commerce                                ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"{Colors.END}\n")
    
    # –®–ª—è—Ö –¥–æ views
    views_dir = PROJECT_ROOT / 'storefront' / 'views'
    
    if not views_dir.exists():
        print_error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è views –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {views_dir}")
        sys.exit(1)
    
    print_info(f"–ê–Ω–∞–ª—ñ–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {views_dir}\n")
    
    # 1. –ê–Ω–∞–ª—ñ–∑ –º–æ–¥—É–ª—ñ–≤
    module_exports = check_module_exports(views_dir)
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ __init__.py
    from_imports, exclude_set, all_set = check_init_imports(views_dir, module_exports)
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
    errors, warnings = validate_consistency(module_exports, from_imports, exclude_set, all_set)
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    check_duplicates(module_exports)
    
    # 5. Backward compatibility (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ Django settings)
    # check_backward_compatibility(views_dir)
    
    # 6. –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
    success = generate_summary(module_exports, from_imports, errors, warnings)
    
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()

