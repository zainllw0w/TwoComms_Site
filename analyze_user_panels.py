#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""

import re
import os
from pathlib import Path

def find_element_usage():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    base_html = Path("twocomms/twocomms_django_theme/templates/base.html")
    header_html = Path("twocomms/twocomms_django_theme/templates/partials/header.html")
    main_js = Path("twocomms/twocomms_django_theme/static/js/main.js")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    id_pattern = r'id="([^"]*)"'
    getElementById_pattern = r'getElementById\(["\']([^"\']*)["\']\)'
    
    elements = {}
    usage = set()
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π...")
    print("=" * 50)
    
    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å ID –≤ HTML —Ñ–∞–π–ª–∞—Ö
    for file_path in [base_html, header_html]:
        if file_path.exists():
            content = file_path.read_text(encoding='utf-8')
            ids = re.findall(id_pattern, content)
            for element_id in ids:
                if any(keyword in element_id.lower() for keyword in ['user', 'panel', 'mobile', 'cart', 'favorites']):
                    elements[element_id] = str(file_path)
    
    # 2. –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ JavaScript
    if main_js.exists():
        js_content = main_js.read_text(encoding='utf-8')
        used_ids = re.findall(getElementById_pattern, js_content)
        usage.update(used_ids)
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
    for element_id, file_path in sorted(elements.items()):
        status = "‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø" if element_id in usage else "‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø"
        print(f"  {element_id:<30} | {status:<15} | {file_path}")
    
    print("\n" + "=" * 50)
    print("üìä –°–≤–æ–¥–∫–∞:")
    
    used_elements = [eid for eid in elements.keys() if eid in usage]
    unused_elements = [eid for eid in elements.keys() if eid not in usage]
    
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {len(used_elements)}")
    print(f"‚ùå –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {len(unused_elements)}")
    
    if unused_elements:
        print("\nüóëÔ∏è  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for element_id in unused_elements:
            print(f"  - {element_id}")
    
    return elements, usage, unused_elements

def analyze_css_classes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSS –∫–ª–∞—Å—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞–Ω–µ–ª—è–º–∏"""
    
    css_file = Path("twocomms/twocomms_django_theme/static/css/styles.css")
    
    if not css_file.exists():
        print("‚ùå CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    content = css_file.read_text(encoding='utf-8')
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤
    patterns = [
        r'\.user-panel[^-]',
        r'\.user-profile[^-]',
        r'\.mini-profile[^-]',
        r'\.cart-panel[^-]',
        r'\.bottom-nav[^-]',
    ]
    
    print("\nüé® –ê–Ω–∞–ª–∏–∑ CSS –∫–ª–∞—Å—Å–æ–≤:")
    print("=" * 50)
    
    for pattern in patterns:
        matches = re.findall(pattern, content)
        if matches:
            print(f"  {pattern}: {len(matches)} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")
    
    # –ü–æ–∏—Å–∫ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    mobile_media = re.findall(r'@media.*max-width.*\d+px.*\{[^}]*\}', content, re.DOTALL)
    print(f"\nüì± –ú–æ–±–∏–ª—å–Ω—ã–µ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã: {len(mobile_media)}")

def main():
    print("üöÄ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π TwoComms")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    elements, usage, unused_elements = find_element_usage()
    
    # –ê–Ω–∞–ª–∏–∑ CSS
    analyze_css_classes()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    if unused_elements:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–¥–∞–ª–∏—Ç—å {len(unused_elements)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print("   –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä HTML –∏ CSS")
    else:
        print("\nüí° –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

if __name__ == "__main__":
    main()
