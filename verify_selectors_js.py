#!/usr/bin/env python3
"""
–¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º JavaScript
"""

import re
import os
import json
from pathlib import Path

def extract_css_selectors(css_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ CSS —Ñ–∞–π–ª–∞"""
    with open(css_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    content_no_comments = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ CSS
    rules = re.findall(r'([^{}]+)\s*\{[^{}]*\}', content_no_comments, re.DOTALL)
    
    selectors = []
    for rule in rules:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–º–æ–≥—É—Ç –±—ã—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        rule_selectors = [s.strip() for s in rule.split(',')]
        for selector in rule_selectors:
            if selector.strip() and not selector.strip().startswith('@'):
                selectors.append(selector.strip())
    
    return selectors

def extract_classes_and_ids_from_selector(selector):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª–∞—Å—Å—ã –∏ ID –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞"""
    classes = set()
    ids = set()
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã (.class-name)
    class_matches = re.findall(r'\.([a-zA-Z0-9_-]+)', selector)
    classes.update(class_matches)
    
    # –ù–∞—Ö–æ–¥–∏–º ID (#id-name)
    id_matches = re.findall(r'#([a-zA-Z0-9_-]+)', selector)
    ids.update(id_matches)
    
    return classes, ids

def scan_all_files_for_usage(templates_dir, static_dir):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ ID"""
    used_classes = set()
    used_ids = set()
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã
    for root, dirs, files in os.walk(templates_dir):
        for file in files:
            if file.endswith('.html'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –≤ HTML
                    class_matches = re.findall(r'class=["\']([^"\']*)["\']', content)
                    for class_string in class_matches:
                        classes = class_string.split()
                        used_classes.update(classes)
                    
                    # –ù–∞—Ö–æ–¥–∏–º ID –≤ HTML
                    id_matches = re.findall(r'id=["\']([^"\']*)["\']', content)
                    used_ids.update(id_matches)
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –≤ JavaScript (–≤ HTML —Ñ–∞–π–ª–∞—Ö)
                    js_class_matches = re.findall(r'\.className\s*=\s*[\'"]([^\'"]+)[\'"]', content)
                    for class_string in js_class_matches:
                        classes = class_string.split()
                        used_classes.update(classes)
                    
                    js_class_matches2 = re.findall(r'classList\.add\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(js_class_matches2)
                    
                    js_class_matches3 = re.findall(r'classList\.remove\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(js_class_matches3)
                    
                    js_class_matches4 = re.findall(r'classList\.toggle\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(js_class_matches4)
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –≤ querySelector
                    query_matches = re.findall(r'querySelector\([\'"]([^\'"]+)[\'"]', content)
                    for query in query_matches:
                        if query.startswith('.'):
                            used_classes.add(query[1:])
                        elif query.startswith('#'):
                            used_ids.add(query[1:])
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –≤ getElementsByClassName
                    get_class_matches = re.findall(r'getElementsByClassName\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(get_class_matches)
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º JS —Ñ–∞–π–ª—ã
    for root, dirs, files in os.walk(static_dir):
        for file in files:
            if file.endswith('.js'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –≤ JavaScript
                    js_class_matches = re.findall(r'\.className\s*=\s*[\'"]([^\'"]+)[\'"]', content)
                    for class_string in js_class_matches:
                        classes = class_string.split()
                        used_classes.update(classes)
                    
                    js_class_matches2 = re.findall(r'classList\.add\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(js_class_matches2)
                    
                    js_class_matches3 = re.findall(r'classList\.remove\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(js_class_matches3)
                    
                    js_class_matches4 = re.findall(r'classList\.toggle\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(js_class_matches4)
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –≤ querySelector
                    query_matches = re.findall(r'querySelector\([\'"]([^\'"]+)[\'"]', content)
                    for query in query_matches:
                        if query.startswith('.'):
                            used_classes.add(query[1:])
                        elif query.startswith('#'):
                            used_ids.add(query[1:])
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –≤ getElementsByClassName
                    get_class_matches = re.findall(r'getElementsByClassName\([\'"]([^\'"]+)[\'"]', content)
                    used_classes.update(get_class_matches)
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    
    return used_classes, used_ids

def is_selector_safe_to_remove(selector, used_classes, used_ids):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä"""
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å–∞–º–∏, –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    if any(pseudo in selector for pseudo in [':hover', ':focus', ':active', ':visited', ':before', ':after', 
                                           ':first-child', ':last-child', ':nth-child', ':nth-of-type']):
        return False
    
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    if '[' in selector and ']' in selector:
        return False
    
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å data- –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    if 'data-' in selector:
        return False
    
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å js- –∫–ª–∞—Å—Å–∞–º–∏ (–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ JS)
    if 'js-' in selector:
        return False
    
    # –ù–µ —É–¥–∞–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã
    if any(tag in selector.lower() for tag in ['html', 'body', 'head', 'script', 'style', 'meta', 'link']):
        return False
    
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–∞–º–∏
    if '@media' in selector or '@keyframes' in selector:
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å—ã –∏ ID –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    selector_classes, selector_ids = extract_classes_and_ids_from_selector(selector)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ ID
    unused_classes = selector_classes - used_classes
    unused_ids = selector_ids - used_ids
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã –∏–ª–∏ ID, —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    return len(unused_classes) > 0 or len(unused_ids) > 0

def main():
    css_file = 'twocomms/twocomms_django_theme/static/css/styles.css'
    templates_dir = 'twocomms/twocomms_django_theme/templates'
    static_dir = 'twocomms/twocomms_django_theme/static'
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º JavaScript...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    selectors = extract_css_selectors(css_file)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {len(selectors)}")
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    used_classes, used_ids = scan_all_files_for_usage(templates_dir, static_dir)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(used_classes)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö ID: {len(used_ids)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    safe_to_remove = []
    for selector in selectors:
        if is_selector_safe_to_remove(selector, used_classes, used_ids):
            safe_to_remove.append(selector)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   - –í—Å–µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {len(selectors)}")
    print(f"   - –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å: {len(safe_to_remove)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    with open('safe_to_remove_selectors_js.json', 'w', encoding='utf-8') as f:
        json.dump({
            'total_selectors': len(selectors),
            'safe_to_remove': safe_to_remove,
            'count': len(safe_to_remove)
        }, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ safe_to_remove_selectors_js.json")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if safe_to_remove:
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤:")
        for i, selector in enumerate(safe_to_remove[:20]):
            print(f"   {i+1}. {selector}")
        if len(safe_to_remove) > 20:
            print(f"   ... –∏ –µ—â–µ {len(safe_to_remove) - 20}")

if __name__ == "__main__":
    main()
