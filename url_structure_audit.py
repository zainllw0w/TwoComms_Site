#!/usr/bin/env python3
"""
–ê—É–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã URL –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –¥–ª—è TwoComms
"""

import requests
import time
from urllib.parse import urljoin, urlparse
from datetime import datetime
import json

class URLStructureAuditor:
    def __init__(self, base_url: str = "https://twocomms.shop"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'base_url': base_url,
            'url_tests': {},
            'redirect_tests': {},
            'issues': [],
            'recommendations': []
        }
    
    def check_url(self, url: str, expected_status: int = 200) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            start_time = time.time()
            response = self.session.head(url, timeout=10, allow_redirects=True)
            load_time = time.time() - start_time
            
            return {
                'url': url,
                'status_code': response.status_code,
                'expected_status': expected_status,
                'is_ok': response.status_code == expected_status,
                'load_time': round(load_time, 3),
                'final_url': response.url,
                'redirected': response.url != url,
                'headers': dict(response.headers),
                'content_type': response.headers.get('content-type', ''),
                'content_length': response.headers.get('content-length', '0')
            }
        except Exception as e:
            return {
                'url': url,
                'status_code': 0,
                'expected_status': expected_status,
                'is_ok': False,
                'error': str(e),
                'load_time': 0
            }
    
    def test_main_pages(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
        
        main_pages = [
            '/',
            '/catalog/',
            '/about/',
            '/contacts/',
            '/cooperation/',
            '/delivery/',
            '/cart/',
            '/login/',
            '/register/',
            '/admin/',
            '/robots.txt',
            '/sitemap.xml',
            '/favicon.ico'
        ]
        
        results = {}
        for page in main_pages:
            url = f"{self.base_url}{page}"
            expected_status = 200 if page not in ['/admin/'] else 302  # admin –¥–æ–ª–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å
            results[page] = self.check_url(url, expected_status)
        
        self.results['url_tests']['main_pages'] = results
    
    def test_redirects(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤...")
        
        redirect_tests = {
            'http_to_https': {
                'from': self.base_url.replace('https://', 'http://'),
                'expected_status': [200, 301, 302, 307, 308]
            },
            'www_redirect': {
                'from': self.base_url.replace('://', '://www.'),
                'expected_status': [200, 301, 302, 307, 308]
            },
            'trailing_slash': {
                'from': f"{self.base_url}/catalog",  # –±–µ–∑ —Å–ª–µ—à–∞
                'expected_status': [200, 301, 302, 307, 308]
            }
        }
        
        results = {}
        for test_name, test_data in redirect_tests.items():
            result = self.check_url(test_data['from'])
            result['expected_statuses'] = test_data['expected_status']
            result['is_expected'] = result['status_code'] in test_data['expected_status']
            results[test_name] = result
        
        self.results['redirect_tests'] = results
    
    def test_product_pages(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤"""
        print("üõçÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ sitemap
        try:
            sitemap_url = f"{self.base_url}/sitemap.xml"
            response = self.session.get(sitemap_url)
            if response.status_code == 200:
                content = response.text
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Ç–æ–≤–∞—Ä–æ–≤
                import re
                product_urls = re.findall(r'<loc>([^<]*product/[^<]*)</loc>', content)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
                test_urls = product_urls[:5]
                results = {}
                
                for url in test_urls:
                    if url.startswith('http'):
                        result = self.check_url(url)
                        results[url] = result
                
                self.results['url_tests']['product_pages'] = results
        except Exception as e:
            self.results['url_tests']['product_pages'] = {'error': str(e)}
    
    def test_category_pages(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        print("üìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ sitemap
        try:
            sitemap_url = f"{self.base_url}/sitemap.xml"
            response = self.session.get(sitemap_url)
            if response.status_code == 200:
                content = response.text
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                import re
                category_urls = re.findall(r'<loc>([^<]*catalog/[^<]*)</loc>', content)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                results = {}
                
                for url in category_urls:
                    if url.startswith('http'):
                        result = self.check_url(url)
                        results[url] = result
                
                self.results['url_tests']['category_pages'] = results
        except Exception as e:
            self.results['url_tests']['category_pages'] = {'error': str(e)}
    
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        issues = []
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        main_pages = self.results['url_tests'].get('main_pages', {})
        for page, result in main_pages.items():
            if not result.get('is_ok', False):
                issues.append(f"‚ùå {page}: —Å—Ç–∞—Ç—É—Å {result.get('status_code', 'error')}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
        redirects = self.results['redirect_tests']
        for test_name, result in redirects.items():
            if not result.get('is_expected', False):
                issues.append(f"üîÑ {test_name}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {result.get('status_code', 'error')}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        slow_pages = []
        for page, result in main_pages.items():
            if result.get('load_time', 0) > 2.0:
                slow_pages.append(f"{page} ({result.get('load_time', 0)}s)")
        
        if slow_pages:
            issues.append(f"‚ö° –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {', '.join(slow_pages)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if any(not result.get('is_ok', False) for result in main_pages.values()):
            recommendations.append("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        if not redirects.get('http_to_https', {}).get('redirected', False):
            recommendations.append("üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç HTTP ‚Üí HTTPS")
        
        if slow_pages:
            recommendations.append("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        self.results['issues'] = issues
        self.results['recommendations'] = recommendations
    
    def run_audit(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã URL"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã URL...")
        print("=" * 60)
        
        self.test_main_pages()
        self.test_redirects()
        self.test_product_pages()
        self.test_category_pages()
        self.analyze_results()
        
        print("‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return self.results
    
    def save_report(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"url_audit_report_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        return filename
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É"""
        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ö–ê –ê–£–î–ò–¢–ê –°–¢–†–£–ö–¢–£–†–´ URL")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        main_pages = self.results['url_tests'].get('main_pages', {})
        ok_pages = sum(1 for result in main_pages.values() if result.get('is_ok', False))
        total_pages = len(main_pages)
        
        print(f"üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {ok_pages}/{total_pages} —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –†–µ–¥–∏—Ä–µ–∫—Ç—ã
        redirects = self.results['redirect_tests']
        ok_redirects = sum(1 for result in redirects.values() if result.get('is_expected', False))
        total_redirects = len(redirects)
        
        print(f"üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç—ã: {ok_redirects}/{total_redirects} —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –¢–æ–≤–∞—Ä—ã
        products = self.results['url_tests'].get('product_pages', {})
        if 'error' not in products:
            ok_products = sum(1 for result in products.values() if result.get('is_ok', False))
            total_products = len(products)
            print(f"üõçÔ∏è –¢–æ–≤–∞—Ä—ã: {ok_products}/{total_products} –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = self.results['url_tests'].get('category_pages', {})
        if 'error' not in categories:
            ok_categories = sum(1 for result in categories.values() if result.get('is_ok', False))
            total_categories = len(categories)
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {ok_categories}/{total_categories} –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        if self.results['issues']:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã ({len(self.results['issues'])}):")
            for issue in self.results['issues']:
                print(f"  ‚Ä¢ {issue}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.results['recommendations']:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(self.results['recommendations'])}):")
            for rec in self.results['recommendations']:
                print(f"  ‚Ä¢ {rec}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê—É–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã URL TwoComms")
    print("=" * 60)
    
    auditor = URLStructureAuditor()
    results = auditor.run_audit()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    auditor.print_summary()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = auditor.save_report()
    
    print(f"\nüéâ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
    
    return results


if __name__ == "__main__":
    main()
