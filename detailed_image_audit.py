#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""
from PIL import Image
from pathlib import Path
import json

def audit_images():
    media_dir = Path('twocomms/media')
    results = {
        'total_count': 0,
        'total_size_mb': 0,
        'by_format': {},
        'unoptimized': [],
        'missing_webp': [],
        'oversized': [],
        'details': []
    }
    
    print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n")
    
    for img_path in media_dir.rglob('*'):
        if img_path.suffix.lower() in ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.avif']:
            try:
                size_bytes = img_path.stat().st_size
                size_mb = size_bytes / 1024 / 1024
                
                with Image.open(img_path) as img:
                    width, height = img.size
                    format_name = img.format
                    
                    info = {
                        'path': str(img_path.relative_to('twocomms')),
                        'size_mb': round(size_mb, 2),
                        'width': width,
                        'height': height,
                        'format': format_name,
                        'pixels': width * height
                    }
                    
                    results['details'].append(info)
                    results['total_count'] += 1
                    results['total_size_mb'] += size_mb
                    
                    # –ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
                    if format_name not in results['by_format']:
                        results['by_format'][format_name] = {'count': 0, 'size_mb': 0}
                    results['by_format'][format_name]['count'] += 1
                    results['by_format'][format_name]['size_mb'] += size_mb
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∏
                    if size_mb > 0.5:  # >500KB
                        results['unoptimized'].append(info)
                    
                    if size_mb > 1.0:  # >1MB
                        results['oversized'].append(info)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebP –≤–µ—Ä—Å–∏—é
                    if img_path.suffix.lower() in ['.jpg', '.jpeg', '.png']:
                        webp_path = img_path.with_suffix('.webp')
                        if not webp_path.exists():
                            results['missing_webp'].append(info['path'])
                            
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {img_path}: {e}")
    
    return results

def print_results(results):
    print("\n" + "=" * 70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–£–î–ò–¢–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 70)
    
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {results['total_count']}")
    print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {results['total_size_mb']:.1f} MB")
    
    print(f"\nüìÅ –ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:")
    for fmt, data in sorted(results['by_format'].items()):
        print(f"  {fmt}: {data['count']} —Ñ–∞–π–ª–æ–≤ ({data['size_mb']:.1f} MB)")
    
    print(f"\nüî¥ –ù–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (>500KB): {len(results['unoptimized'])}")
    for img in sorted(results['unoptimized'], key=lambda x: x['size_mb'], reverse=True)[:20]:
        print(f"  {img['size_mb']:.2f}MB - {img['path']} ({img['width']}x{img['height']})")
    
    print(f"\nüî¥ –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (>1MB): {len(results['oversized'])}")
    for img in sorted(results['oversized'], key=lambda x: x['size_mb'], reverse=True)[:10]:
        print(f"  {img['size_mb']:.2f}MB - {img['path']}")
    
    print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç WebP –≤–µ—Ä—Å–∏—è: {len(results['missing_webp'])} —Ñ–∞–π–ª–æ–≤")
    for path in results['missing_webp'][:10]:
        print(f"  {path}")
    if len(results['missing_webp']) > 10:
        print(f"  ... –∏ –µ—â—ë {len(results['missing_webp']) - 10}")
    
    # –¢–æ–ø-20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö
    print(f"\nüìä –¢–æ–ø-20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    for i, img in enumerate(sorted(results['details'], key=lambda x: x['size_mb'], reverse=True)[:20], 1):
        print(f"  {i}. {img['size_mb']:.2f}MB - {img['path']}")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON
    with open('artifacts/audit_2025-10-21/images-detailed.json', 'w') as f:
        json.dump(results, f, indent=2)
    
    print(f"\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: artifacts/audit_2025-10-21/images-detailed.json")

if __name__ == '__main__':
    results = audit_images()
    print_results(results)
