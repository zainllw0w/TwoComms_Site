#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º CSS
"""

import re
import json

def load_safe_selectors():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
    with open('safe_to_remove_selectors_js.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def is_safe_to_remove(selector):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä"""
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ CSS
    if any(keyword in selector for keyword in [
        'perf-lite', 'modal-glass', 'panel-glass', 'card.glassy', 'hero.bg-hero',
        'cart-message', 'cart-promo', 'cart-total', 'order-card', 'order-total'
    ]):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å–∞–º–∏
    if any(pseudo in selector for pseudo in [':hover', ':focus', ':active', ':visited', ':before', ':after']):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    if '[' in selector and ']' in selector:
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã
    if any(tag in selector.lower() for tag in ['html', 'body', 'head', 'script', 'style']):
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–∞–º–∏
    if '@media' in selector or '@keyframes' in selector:
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é keyframes
    if selector.strip() in ['0%', '25%', '50%', '75%', '100%']:
        return False
    
    return True

def remove_css_rule_safely(content, selector):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç CSS –ø—Ä–∞–≤–∏–ª–æ"""
    # –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    clean_selector = re.sub(r'/\*.*?\*/', '', selector).strip()
    if not clean_selector:
        return content, False
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    escaped_selector = re.escape(clean_selector)
    
    # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ CSS –ø—Ä–∞–≤–∏–ª–æ
    # –ü–∞—Ç—Ç–µ—Ä–Ω: —Å–µ–ª–µ–∫—Ç–æ—Ä { —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ }
    pattern = rf'({escaped_selector})\s*\{{[^{{}}]*(?:\{{[^{{}}]*\}}[^{{}}]*)*\}}'
    
    match = re.search(pattern, content, flags=re.DOTALL)
    if match:
        # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        new_content = content.replace(match.group(0), '')
        return new_content, True
    
    return content, False

def remove_unused_selectors_safely(css_file, selectors_to_remove):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ CSS —Ñ–∞–π–ª–∞"""
    with open(css_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_size = len(content)
    removed_count = 0
    
    for selector in selectors_to_remove:
        if is_safe_to_remove(selector):
            new_content, removed = remove_css_rule_safely(content, selector)
            if removed:
                content = new_content
                removed_count += 1
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(css_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    new_size = len(content)
    size_reduction = original_size - new_size
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:")
    print(f"   - –£–¥–∞–ª–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {removed_count}")
    print(f"   - –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {size_reduction} —Å–∏–º–≤–æ–ª–æ–≤ ({size_reduction/original_size*100:.1f}%)")
    print(f"   - –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {new_size} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return removed_count, size_reduction

def main():
    print("üîç –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    data = load_safe_selectors()
    all_safe_selectors = data['safe_to_remove']
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    safe_to_remove = [s for s in all_safe_selectors if is_safe_to_remove(s)]
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {len(safe_to_remove)}")
    
    if not safe_to_remove:
        print("‚ùå –ù–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    print(f"\nüìã –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 10):")
    for i, selector in enumerate(safe_to_remove[:10]):
        print(f"   {i+1}. {selector}")
    if len(safe_to_remove) > 10:
        print(f"   ... –∏ –µ—â–µ {len(safe_to_remove) - 10}")
    
    # –£–¥–∞–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    css_file = 'twocomms/twocomms_django_theme/static/css/styles.css'
    removed_count, size_reduction = remove_unused_selectors_safely(css_file, safe_to_remove)
    
    print(f"\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
