#!/usr/bin/env python3
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è CSS —Å—Ç–∏–ª–µ–π
"""

import re
import json

def load_consolidation_plan():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    with open('css_consolidation_plan.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def consolidate_duplicates(css_file, consolidation_plan):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–∏–ª–∏"""
    with open(css_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_size = len(content)
    consolidated_count = 0
    total_savings = 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º utility –∫–ª–∞—Å—Å—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    utility_classes = []
    
    for item in consolidation_plan[:50]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        styles = item['styles']
        selectors = item['current_selectors']
        utility_class = item['suggested_utility_class']
        
        # –°–æ–∑–¥–∞–µ–º utility –∫–ª–∞—Å—Å
        utility_rule = f"{utility_class} {{\n  {styles}\n}}\n\n"
        utility_classes.append(utility_rule)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–∞–≤–∏–ª–∞
        for selector in selectors:
            # –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            clean_selector = re.sub(r'/\*.*?\*/', '', selector).strip()
            if not clean_selector:
                continue
                
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            escaped_selector = re.escape(clean_selector)
            
            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
            pattern = rf'{escaped_selector}\s*\{{[^{{}}]*(?:\{{[^{{}}]*\}}[^{{}}]*)*\}}'
            match = re.search(pattern, content, flags=re.DOTALL)
            
            if match:
                content = content.replace(match.group(0), '')
                consolidated_count += 1
                print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä: {clean_selector}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º utility –∫–ª–∞—Å—Å—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    if utility_classes:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        first_rule_match = re.search(r'^[^{]*\{', content, re.MULTILINE)
        if first_rule_match:
            insert_pos = first_rule_match.start()
            utility_css = '\n'.join(utility_classes)
            content = content[:insert_pos] + utility_css + content[insert_pos:]
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            content += '\n\n' + '\n'.join(utility_classes)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(css_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    new_size = len(content)
    size_reduction = original_size - new_size
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
    print(f"   - –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {consolidated_count}")
    print(f"   - –î–æ–±–∞–≤–ª–µ–Ω–æ utility –∫–ª–∞—Å—Å–æ–≤: {len(utility_classes)}")
    print(f"   - –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {size_reduction} —Å–∏–º–≤–æ–ª–æ–≤ ({size_reduction/original_size*100:.1f}%)")
    print(f"   - –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {new_size} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return consolidated_count, size_reduction

def main():
    print("üîç –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è CSS —Å—Ç–∏–ª–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    plan = load_consolidation_plan()
    consolidation_plan = plan['consolidation_plan']
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π: {len(consolidation_plan)}")
    
    if not consolidation_plan:
        print("‚ùå –ù–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 5):")
    for i, item in enumerate(consolidation_plan[:5]):
        print(f"   {i+1}. {item['suggested_utility_class']} - {item['savings']}")
        print(f"      –°—Ç–∏–ª–∏: {item['styles'][:50]}...")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    css_file = 'twocomms/twocomms_django_theme/static/css/styles.css'
    consolidated_count, size_reduction = consolidate_duplicates(css_file, consolidation_plan)
    
    print(f"\n‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
