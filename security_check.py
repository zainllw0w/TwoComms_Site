#!/usr/bin/env python3
"""
Security Check Script –¥–ª—è TwoComms
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ security issues –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""
import os
import subprocess
import sys
from pathlib import Path

def check_env_files():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–æ–≤ –≤ Git"""
    try:
        result = subprocess.run(
            ['git', 'ls-files', '*.env*'],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent
        )
        if result.stdout.strip():
            print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω—ã .env —Ñ–∞–π–ª—ã –≤ Git:")
            for file in result.stdout.strip().split('\n'):
                print(f"  - {file}")
            return False
        print("‚úÖ .env —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Git")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ env —Ñ–∞–π–ª–æ–≤: {e}")
        return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ git –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω

def check_secret_key():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ SECRET_KEY"""
    if not os.environ.get('SECRET_KEY'):
        print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ environment")
        print("   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ: python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"")
        return False
    print("‚úÖ SECRET_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return True

def check_debug():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å DEBUG —Ä–µ–∂–∏–º"""
    debug = os.environ.get('DEBUG', 'True').lower() in ('true', '1', 'yes')
    if debug:
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: DEBUG –≤–∫–ª—é—á—ë–Ω (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è production)")
        return False
    print("‚úÖ DEBUG –≤—ã–∫–ª—é—á–µ–Ω")
    return True

def check_console_logs():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ console.log –≤ JS —Ñ–∞–π–ª–∞—Ö"""
    js_dir = Path(__file__).parent / 'twocomms' / 'static' / 'js'
    if not js_dir.exists():
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ static/js –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return True
    
    found = []
    for js_file in js_dir.rglob('*.js'):
        with open(js_file, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
            for i, line in enumerate(lines, 1):
                if 'console.log' in line or 'console.warn' in line:
                    found.append(f"{js_file.name}:{i}")
    
    if found:
        print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ {len(found)} console.log/warn –≤ JS —Ñ–∞–π–ª–∞—Ö:")
        for item in found[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  - {item}")
        if len(found) > 5:
            print(f"  ... –∏ –µ—â—ë {len(found) - 5}")
        return False
    print("‚úÖ console.log –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JS")
    return True

def check_redis_config():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Redis"""
    docker_compose = Path(__file__).parent / 'docker-compose.yml'
    if not docker_compose.exists():
        print("‚ö†Ô∏è docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True
    
    with open(docker_compose, 'r') as f:
        content = f.read()
        if '6379:6379' in content and 'requirepass' not in content:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Redis –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç –±–µ–∑ –ø–∞—Ä–æ–ª—è")
            return False
    
    print("‚úÖ Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞")
    return True

def check_csrf_exempt():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ @csrf_exempt"""
    views_dir = Path(__file__).parent / 'twocomms' / 'storefront'
    if not views_dir.exists():
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ storefront –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return True
    
    count = 0
    for py_file in views_dir.rglob('*.py'):
        with open(py_file, 'r', encoding='utf-8', errors='ignore') as f:
            count += f.read().count('@csrf_exempt')
    
    if count > 0:
        print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π @csrf_exempt")
        return False
    print("‚úÖ @csrf_exempt –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    return True

def main():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ TwoComms –ø—Ä–æ–µ–∫—Ç–∞\n")
    print("=" * 60)
    
    checks = [
        ("Env files –≤ Git", check_env_files),
        ("SECRET_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", check_secret_key),
        ("DEBUG –≤—ã–∫–ª—é—á–µ–Ω", check_debug),
        ("Console.log –≤ JS", check_console_logs),
        ("Redis –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", check_redis_config),
        ("CSRF protection", check_csrf_exempt),
    ]
    
    passed = 0
    failed = 0
    warnings = 0
    total = len(checks)
    
    for name, check in checks:
        print(f"\n[{name}]", end=" ")
        try:
            if check():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}/{total}")
    print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
    
    if failed > 0:
        print("\nüî¥ –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!")
        print("   –°–º. FULL_PROJECT_AUDIT_REPORT.md –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        sys.exit(1)
    else:
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(0)

if __name__ == '__main__':
    main()

