#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è TwoComms
–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
"""

import json
import re
from pathlib import Path

def load_analysis_report():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    with open('css_analysis_report.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_deep_analysis_report():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç—á–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    with open('css_deep_analysis_report.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def generate_unused_selectors_list():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
    report = load_analysis_report()
    deep_report = load_deep_analysis_report()
    
    unused_selectors = report.get('unused_selectors', [])
    unused_animations = deep_report.get('unused_animations', [])
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    unused_list = {
        'summary': {
            'total_unused_selectors': len(unused_selectors),
            'total_unused_animations': len(unused_animations),
            'estimated_size_reduction': '30-40%'
        },
        'unused_selectors': unused_selectors,
        'unused_animations': unused_animations,
        'safe_to_remove': {
            'selectors': [],
            'animations': unused_animations
        }
    }
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å
    safe_selectors = []
    for selector in unused_selectors:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        if not any(keyword in selector.lower() for keyword in [
            'hover', 'focus', 'active', 'visited', 'before', 'after',
            'first-child', 'last-child', 'nth-child', 'js-', 'data-'
        ]):
            safe_selectors.append(selector)
    
    unused_list['safe_to_remove']['selectors'] = safe_selectors
    
    return unused_list

def generate_duplicate_consolidation_plan():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π"""
    report = load_analysis_report()
    duplicates = report.get('duplicate_styles', [])
    
    consolidation_plan = {
        'summary': {
            'total_duplicate_groups': len(duplicates),
            'estimated_size_reduction': '10-15%'
        },
        'consolidation_plan': []
    }
    
    for duplicate in duplicates[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if duplicate['count'] > 1:
            consolidation_plan['consolidation_plan'].append({
                'styles': duplicate['styles'],
                'current_selectors': duplicate['selectors'],
                'suggested_utility_class': f".utility-{hash(duplicate['styles']) % 10000}",
                'savings': f"{duplicate['count'] - 1} duplicate(s)"
            })
    
    return consolidation_plan

def main():
    print("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    unused_list = generate_unused_selectors_list()
    
    with open('unused_css_selectors.json', 'w', encoding='utf-8') as f:
        json.dump(unused_list, f, ensure_ascii=False, indent=2)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    consolidation_plan = generate_duplicate_consolidation_plan()
    
    with open('css_consolidation_plan.json', 'w', encoding='utf-8') as f:
        json.dump(consolidation_plan, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –°–ø–∏—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    print("   - unused_css_selectors.json - –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
    print("   - css_consolidation_plan.json - –ø–ª–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {unused_list['summary']['total_unused_selectors']}")
    print(f"   - –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: {unused_list['summary']['total_unused_animations']}")
    print(f"   - –ì—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π: {consolidation_plan['summary']['total_duplicate_groups']}")
    print(f"   - –û–∂–∏–¥–∞–µ–º–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {unused_list['summary']['estimated_size_reduction']}")

if __name__ == "__main__":
    main()

