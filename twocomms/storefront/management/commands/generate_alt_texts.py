"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ alt-—Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –Ω–∏—Ö
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.conf import settings
import os
import re
from pathlib import Path

from storefront.models import Product, Category, ProductImage
from productcolors.models import ProductColorImage


class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç alt-—Ç–µ–∫—Å—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –Ω–∏—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ alt-—Ç–µ–∫—Å—Ç—ã',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        force = options['force']
        
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è alt-—Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è TwoComms...')
        )
        
        results = {
            'products_updated': 0,
            'categories_updated': 0,
            'product_images_updated': 0,
            'color_images_updated': 0,
            'total_generated': 0
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        results.update(self.process_products(dry_run, force))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        results.update(self.process_categories(dry_run, force))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        results.update(self.process_product_images(dry_run, force))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        results.update(self.process_color_images(dry_run, force))
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_results(results, dry_run)
        
        if not dry_run:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {results["total_generated"]} alt-—Ç–µ–∫—Å—Ç–æ–≤')
            )
        else:
            self.stdout.write(
                self.style.WARNING('üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.')
            )

    def process_products(self, dry_run=False, force=False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
        results = {'products_updated': 0, 'products_alt_generated': 0}
        
        products = Product.objects.all()
        
        for product in products:
            updated = False
            
            # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            if product.main_image and (not product.main_image_alt or force):
                alt_text = self.generate_product_alt_text(product, 'main')
                if not dry_run:
                    product.main_image_alt = alt_text
                    product.save(update_fields=['main_image_alt'])
                updated = True
                results['products_alt_generated'] += 1
            
            if updated:
                results['products_updated'] += 1
        
        return results

    def process_categories(self, dry_run=False, force=False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        results = {'categories_updated': 0, 'categories_alt_generated': 0}
        
        categories = Category.objects.all()
        
        for category in categories:
            updated = False
            
            # –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category.icon:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –ø–æ–ª–µ icon_alt_text
                if hasattr(category, 'icon_alt_text') and (not category.icon_alt_text or force):
                    alt_text = self.generate_category_alt_text(category, 'icon')
                    if not dry_run:
                        category.icon_alt_text = alt_text
                        category.save(update_fields=['icon_alt_text'])
                    updated = True
                    results['categories_alt_generated'] += 1
            
            # –û–±–ª–æ–∂–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category.cover:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –ø–æ–ª–µ cover_alt_text
                if hasattr(category, 'cover_alt_text') and (not category.cover_alt_text or force):
                    alt_text = self.generate_category_alt_text(category, 'cover')
                    if not dry_run:
                        category.cover_alt_text = alt_text
                        category.save(update_fields=['cover_alt_text'])
                    updated = True
                    results['categories_alt_generated'] += 1
            
            if updated:
                results['categories_updated'] += 1
        
        return results

    def process_product_images(self, dry_run=False, force=False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        results = {'product_images_updated': 0, 'product_images_alt_generated': 0}
        
        product_images = ProductImage.objects.all()
        
        for product_image in product_images:
            if not product_image.alt_text or force:
                alt_text = self.generate_product_alt_text(
                    product_image.product, 
                    'gallery',
                    photo_number=product_image.id
                )
                if not dry_run:
                    product_image.alt_text = alt_text
                    product_image.save(update_fields=['alt_text'])
                results['product_images_updated'] += 1
                results['product_images_alt_generated'] += 1
        
        return results

    def process_color_images(self, dry_run=False, force=False):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        results = {'color_images_updated': 0, 'color_images_alt_generated': 0}
        
        color_images = ProductColorImage.objects.select_related('variant__product', 'variant__color').all()
        
        for color_image in color_images:
            if not color_image.alt_text or force:
                alt_text = self.generate_color_variant_alt_text(color_image)
                if not dry_run:
                    color_image.alt_text = alt_text
                    color_image.save(update_fields=['alt_text'])
                results['color_images_updated'] += 1
                results['color_images_alt_generated'] += 1
        
        return results

    def generate_product_alt_text(self, product, image_type='main', photo_number=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç alt-—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        product_title = product.title
        category_name = product.category.name if product.category else '–æ–¥—è–≥'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        product_type = self.detect_product_type(product_title, category_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        color = self.detect_color_from_title(product_title)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º alt-—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if image_type == 'main':
            alt_text = f"{product_title} - {color} {product_type} TwoComms"
        elif image_type == 'gallery':
            photo_num = f" {photo_number}" if photo_number else ""
            alt_text = f"{product_title} - {color} {product_type} - —Ñ–æ—Ç–æ{photo_num} TwoComms"
        elif image_type == 'thumbnail':
            alt_text = f"{product_title} - {color} {product_type} - –º—ñ–Ω—ñ–∞—Ç—é—Ä–∞ TwoComms"
        else:
            alt_text = f"{product_title} - {color} {product_type} TwoComms"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return self.limit_length(alt_text, 125)

    def generate_category_alt_text(self, category, image_type='icon'):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç alt-—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = category.name
        
        if image_type == 'icon':
            alt_text = f"{category_name} —ñ–∫–æ–Ω–∫–∞ - TwoComms"
        elif image_type == 'cover':
            alt_text = f"{category_name} –∫–∞—Ç–µ–≥–æ—Ä—ñ—è - TwoComms –º–∞–≥–∞–∑–∏–Ω"
        else:
            alt_text = f"{category_name} - TwoComms"
        
        return self.limit_length(alt_text, 125)

    def generate_color_variant_alt_text(self, color_image):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç alt-—Ç–µ–∫—Å—Ç –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        product = color_image.variant.product
        color = color_image.variant.color
        
        product_title = product.title
        product_type = self.detect_product_type(product_title, product.category.name if product.category else '')
        color_name = self.get_color_name(color)
        
        alt_text = f"{product_title} - {color_name} {product_type} TwoComms"
        
        return self.limit_length(alt_text, 125)

    def detect_product_type(self, title, category):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞"""
        title_lower = title.lower()
        category_lower = category.lower() if category else ''
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        product_types = {
            '—Ñ—É—Ç–±–æ–ª–∫–∞': ['—Ñ—É—Ç–±–æ–ª–∫–∞', 't-shirt', 'tshirt'],
            '—Ö—É–¥—ñ': ['—Ö—É–¥—ñ', 'hoodie', '—Ç–æ–ª—Å—Ç–æ–≤–∫–∞'],
            '–ª–æ–Ω–≥—Å–ª—ñ–≤': ['–ª–æ–Ω–≥—Å–ª—ñ–≤', 'longsleeve', '–¥–æ–≤–≥–∏–π —Ä—É–∫–∞–≤'],
            '—Å–≤—ñ—Ç—à–æ—Ç': ['—Å–≤—ñ—Ç—à–æ—Ç', 'sweatshirt', '—Å–≤—ñ—Ç—à–æ—Ç']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        for product_type, keywords in product_types.items():
            for keyword in keywords:
                if keyword in title_lower:
                    return product_type
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for product_type, keywords in product_types.items():
            for keyword in keywords:
                if keyword in category_lower:
                    return product_type
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return '–æ–¥—è–≥'

    def detect_color_from_title(self, title):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        title_lower = title.lower()
        
        colors = {
            '—á–æ—Ä–Ω–∏–π': ['—á–æ—Ä–Ω', 'black', 'dark'],
            '–±—ñ–ª–∏–π': ['–±—ñ–ª', 'white', 'light'],
            '—Å—ñ—Ä–∏–π': ['—Å—ñ—Ä', 'grey', 'gray'],
            '–∑–µ–ª–µ–Ω–∏–π': ['–∑–µ–ª–µ–Ω', 'green'],
            '—Å–∏–Ω—ñ–π': ['—Å–∏–Ω', 'blue'],
            '—á–µ—Ä–≤–æ–Ω–∏–π': ['—á–µ—Ä–≤–æ–Ω', 'red'],
            '–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π': ['–∫–æ—Ä–∏—á–Ω–µ–≤', 'brown'],
            '–±–µ–∂–µ–≤–∏–π': ['–±–µ–∂', 'beige']
        }
        
        for color, variations in colors.items():
            for variation in variations:
                if variation in title_lower:
                    return color
        
        return '—Ä—ñ–∑–Ω–æ–∫–æ–ª—å–æ—Ä–æ–≤–∏–π'

    def get_color_name(self, color):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞"""
        if not color:
            return '—Ä—ñ–∑–Ω–æ–∫–æ–ª—å–æ—Ä–æ–≤–∏–π'
        
        # –ï—Å–ª–∏ —É —Ü–≤–µ—Ç–∞ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        if hasattr(color, 'name') and color.name:
            return color.name.lower()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å hex –∫–æ–¥
        if hasattr(color, 'primary_hex') and color.primary_hex:
            return self.hex_to_color_name(color.primary_hex)
        
        return '—Ä—ñ–∑–Ω–æ–∫–æ–ª—å–æ—Ä–æ–≤–∏–π'

    def hex_to_color_name(self, hex_color):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç hex —Ü–≤–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        hex_to_color = {
            '#000000': '—á–æ—Ä–Ω–∏–π',
            '#FFFFFF': '–±—ñ–ª–∏–π',
            '#808080': '—Å—ñ—Ä–∏–π',
            '#008000': '–∑–µ–ª–µ–Ω–∏–π',
            '#0000FF': '—Å–∏–Ω—ñ–π',
            '#FF0000': '—á–µ—Ä–≤–æ–Ω–∏–π',
            '#A52A2A': '–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π',
            '#F5F5DC': '–±–µ–∂–µ–≤–∏–π'
        }
        
        return hex_to_color.get(hex_color.upper(), '—Ä—ñ–∑–Ω–æ–∫–æ–ª—å–æ—Ä–æ–≤–∏–π')

    def limit_length(self, text, max_length):
        """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞"""
        if len(text) <= max_length:
            return text
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–±–µ–ª–∞
        truncated = text[:max_length-3]
        last_space = truncated.rfind(' ')
        if last_space > max_length * 0.8:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            return truncated[:last_space] + '...'
        
        return truncated + '...'

    def print_results(self, results, dry_run):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        self.stdout.write('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
        self.stdout.write(f'   –¢–æ–≤–∞—Ä—ã: {results["products_updated"]} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {results["products_alt_generated"]} alt-—Ç–µ–∫—Å—Ç–æ–≤')
        self.stdout.write(f'   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {results["categories_updated"]} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {results["categories_alt_generated"]} alt-—Ç–µ–∫—Å—Ç–æ–≤')
        self.stdout.write(f'   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {results["product_images_updated"]} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {results["product_images_alt_generated"]} alt-—Ç–µ–∫—Å—Ç–æ–≤')
        self.stdout.write(f'   –¶–≤–µ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {results["color_images_updated"]} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {results["color_images_alt_generated"]} alt-—Ç–µ–∫—Å—Ç–æ–≤')
        
        total_generated = (results["products_alt_generated"] + 
                          results["categories_alt_generated"] + 
                          results["product_images_alt_generated"] + 
                          results["color_images_alt_generated"])
        
        self.stdout.write(f'\nüéØ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ alt-—Ç–µ–∫—Å—Ç–æ–≤: {total_generated}')
        
        if dry_run:
            self.stdout.write('\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')