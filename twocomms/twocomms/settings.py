"""
Django settings for twocomms project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import pymysql

# Настройка PyMySQL для работы с MySQL
pymysql.install_as_MySQLdb()

# Build paths inside the project

# Helper parsers for environment variables
def _env_bool(name, default=False):
    value = os.environ.get(name)
    if value is None:
        return default
    return str(value).strip().lower() in ('1', 'true', 'yes', 'on')

def _env_list(name, default=''):
    value = os.environ.get(name, default)
    if not value:
        return []
    return [item.strip() for item in value.split(',') if item.strip()]

def _env_int(name, default):
    try:
        return int(os.environ.get(name, default))
    except (TypeError, ValueError):
        return default

def _env_json(name, default=None):
    value = os.environ.get(name)
    if not value:
        return {} if default is None else default
    try:
        import json
        return json.loads(value)
    except Exception:
        return {} if default is None else default
# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-!t*_^p60d-88kvjs%*&!czbes-q8-#$r!-d_0%o495rfed6i*+')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('true', '1', 'yes')

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',') if os.environ.get('ALLOWED_HOSTS') else [
    'test.com',
    'www.test.com',
    'twocomms.shop',
    'www.twocomms.shop',
    'localhost',
    '127.0.0.1',
    '*',  # Для разработки
]

# Security settings (только для продакшена)
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:
    # Для разработки - менее строгие настройки
    SECURE_BROWSER_XSS_FILTER = False
    SECURE_CONTENT_TYPE_NOSNIFF = False
    X_FRAME_OPTIONS = 'SAMEORIGIN'
    SECURE_HSTS_SECONDS = 0


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",   # ← только один раз!
    "django.contrib.sites",         # Sites framework для redirects
    "django.contrib.sitemaps",      # Sitemap для SEO
    "django.contrib.redirects",     # Редиректы для SEO
    "compressor",                   # Сжатие статических файлов
    "storefront.apps.StorefrontConfig",  # наше приложение из пакета
    "accounts",                     # регистрируем приложение аккаунтов
    "orders.apps.OrdersConfig",     # заказы (корректный AppConfig)
    "productcolors.apps.ProductColorsConfig",  # цветовые варианты товаров
    # Social auth
    "social_django",
]

# Явно переопределим список middleware, чтобы исключить любые лишние строки
MIDDLEWARE = [
    "twocomms.middleware.ForceHTTPSMiddleware",  # Принудительный HTTPS
    "twocomms.middleware.WWWRedirectMiddleware",  # Редирект с www
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "twocomms.image_middleware.ImageOptimizationMiddleware",  # Оптимизация изображений
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.redirects.middleware.RedirectFallbackMiddleware",  # SEO редиректы
    "storefront.tracking.SimpleAnalyticsMiddleware",  # простая аналитика посещений
]

ROOT_URLCONF = 'twocomms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "twocomms_django_theme" / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'storefront.context_processors.orders_processing_count',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'twocomms.wsgi.application'

# Sites framework
SITE_ID = 1

# URL для входа в систему
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Социальная аутентификация (Google)
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('GOOGLE_CLIENT_ID', '')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET', '')
SOCIAL_AUTH_REDIRECT_IS_HTTPS = os.environ.get('SOCIAL_AUTH_REDIRECT_IS_HTTPS', 'True').lower() in ('1','true','yes')
SOCIAL_AUTH_URL_NAMESPACE = 'social'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
SOCIAL_AUTH_LOGIN_ERROR_URL = '/login/'

# OpenAI API key from environment
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY') or os.environ.get('OPEN_API_KEY', '')
# Default OpenAI model for AI-assisted SEO keyword generation
OPENAI_MODEL = os.environ.get('OPENAI_MODEL', 'gpt-4o')
# Whether to use AI-generated keywords in addition to rule-based keywords
USE_AI_KEYWORDS = os.environ.get('USE_AI_KEYWORDS', 'False').lower() in ('1','true','yes')
# Whether to use AI-generated product descriptions in SEO meta (experimental)
USE_AI_DESCRIPTIONS = os.environ.get('USE_AI_DESCRIPTIONS', 'False').lower() in ('1','true','yes')

# Monobank acquiring
MONOBANK_TOKEN = os.environ.get('MONOBANK_TOKEN', '')
MONOBANK_API_BASE = os.environ.get('MONOBANK_API_BASE', 'https://api.monobank.ua')
# Optional override for webhook URL; if empty we build from request context
MONOBANK_WEBHOOK_URL = os.environ.get('MONOBANK_WEBHOOK_URL', '')

# Mono Checkout (order-based flow) configuration
MONOBANK_CHECKOUT_DELIVERY_METHODS = _env_list('MONOBANK_CHECKOUT_DELIVERY_METHODS', 'pickup,np_brnm,courier,np_box')
if not MONOBANK_CHECKOUT_DELIVERY_METHODS:
    MONOBANK_CHECKOUT_DELIVERY_METHODS = ['pickup', 'np_brnm', 'courier', 'np_box']

MONOBANK_CHECKOUT_PAYMENT_METHODS = _env_list('MONOBANK_CHECKOUT_PAYMENT_METHODS', 'card,payment_on_delivery')
if not MONOBANK_CHECKOUT_PAYMENT_METHODS:
    MONOBANK_CHECKOUT_PAYMENT_METHODS = ['card']

MONOBANK_CHECKOUT_CALLBACK_URL = os.environ.get('MONOBANK_CHECKOUT_CALLBACK_URL', '')
MONOBANK_CHECKOUT_RETURN_URL = os.environ.get('MONOBANK_CHECKOUT_RETURN_URL', '')
MONOBANK_CHECKOUT_PAYMENTS_NUMBER = _env_int('MONOBANK_CHECKOUT_PAYMENTS_NUMBER', 3)
MONOBANK_CHECKOUT_ACCEPTABLE_AGE = _env_int('MONOBANK_CHECKOUT_ACCEPTABLE_AGE', 18)
MONOBANK_CHECKOUT_DLV_PAY_MERCHANT = _env_bool('MONOBANK_CHECKOUT_DLV_PAY_MERCHANT', False)
MONOBANK_CHECKOUT_HOLD = _env_bool('MONOBANK_CHECKOUT_HOLD', False)
MONOBANK_CHECKOUT_FL_RECALL = _env_bool('MONOBANK_CHECKOUT_FL_RECALL', False)
MONOBANK_CHECKOUT_DESTINATION_TEMPLATE = os.environ.get('MONOBANK_CHECKOUT_DESTINATION_TEMPLATE', 'Оплата замовлення {order_number}')
MONOBANK_CHECKOUT_DEFAULT_DLV_INFO = _env_json('MONOBANK_CHECKOUT_DEFAULT_DLV_INFO', {})

# Redirects for social-auth
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/profile/setup/'

# Pipeline для обработки данных из Google
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'storefront.social_pipeline.require_email',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'storefront.social_pipeline.get_avatar_url',
    'storefront.social_pipeline.create_or_update_profile',
)

# Дополнительные настройки для Google OAuth
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
SOCIAL_AUTH_LOGIN_ERROR_URL = '/login/'

# Логирование для отладки social-auth
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'storefront.social_pipeline': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'social_core': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database selection by DB_ENGINE env: mysql | postgresql | sqlite (default)
# Ожидаемые переменные окружения: DB_ENGINE, DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
DB_ENGINE = os.environ.get('DB_ENGINE', '').lower()
DB_NAME = os.environ.get('DB_NAME')
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD', '')
DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_PORT = os.environ.get('DB_PORT')

# Для локальной разработки используем SQLite, для продакшена - MySQL
if DEBUG:
    # Локальная разработка - SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif DB_ENGINE.startswith('mysql') and DB_NAME and DB_USER:
    # Продакшен - MySQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': DB_PORT or '3306',
            'CONN_MAX_AGE': 60,
            'OPTIONS': {
                'charset': 'utf8mb4',
                'use_unicode': True,
                # 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }
elif (DB_ENGINE.startswith('post') or (DB_NAME and DB_USER)):
    # Продакшен - PostgreSQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': DB_PORT or '5432',
            'CONN_MAX_AGE': 60,
            'OPTIONS': {
                'sslmode': os.environ.get('DB_SSLMODE', 'prefer')
            }
        }
    }
else:
    # Fallback на SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Kiev'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


TEMPLATES[0]["DIRS"] = [BASE_DIR / "twocomms_django_theme" / "templates"]
STATICFILES_DIRS = [BASE_DIR / "twocomms_django_theme" / "static"]
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===== КЭШИРОВАНИЕ =====
# Используем Redis для кэширования в продакшене, LocMemCache для разработки
REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
REDIS_DB = os.environ.get('REDIS_DB', '0')

# Для локальной разработки используем LocMemCache, для продакшена - Redis
if DEBUG:
    # Локальная разработка - LocMemCache
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'twocomms-local',
            'TIMEOUT': 300,
            'OPTIONS': {
                'MAX_ENTRIES': 2000,
                'CULL_FREQUENCY': 3,
            }
        }
    }
else:
    # Продакшен - Redis
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'PARSER_CLASS': 'redis.connection.HiredisParser',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
                'SOCKET_CONNECT_TIMEOUT': 5,
                'SOCKET_TIMEOUT': 5,
                'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
                'IGNORE_EXCEPTIONS': True,  # Не падать если Redis недоступен
            },
            'KEY_PREFIX': 'twocomms',
            'TIMEOUT': 300,
        }
    }

# Сессии через cached_db (кэш поверх БД)
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'

# Кэширование шаблонов (только для продакшена)
if not DEBUG:
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        ('django.template.loaders.cached.Loader', [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]),
    ]
    TEMPLATES[0]['APP_DIRS'] = False
else:
    # В режиме разработки используем стандартные загрузчики
    TEMPLATES[0]['APP_DIRS'] = True

# ===== НАСТРОЙКИ СЖАТИЯ СТАТИЧЕСКИХ ФАЙЛОВ =====
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = not DEBUG
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.rJSMinFilter',
]

# Настройки для продакшена
if not DEBUG:
    COMPRESS_CSS_HASHING_METHOD = 'content'
    COMPRESS_JS_HASHING_METHOD = 'content'
    # WhiteNoise: gzip+brotli, агрессивный кэш
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
    WHITENOISE_MAX_AGE = 60*60*24*180  # 180 дней
    WHITENOISE_IMMUTABLE_FILE_TEST = lambda path, url: True

# ===== НАСТРОЙКИ БЕЗОПАСНОСТИ =====
# Базовые настройки безопасности
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Дополнительные настройки безопасности
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = 'require-corp'

# Настройки для продакшена
if not DEBUG:
    SECURE_HSTS_SECONDS = 31536000  # 1 год
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SECURE_REDIRECT_EXEMPT = []  # Принудительный редирект для всех URL
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Настройки сессий (адаптивные для локальной разработки и продакшена)
SESSION_COOKIE_SECURE = not DEBUG   # HTTPS только в продакшене
CSRF_COOKIE_SECURE = not DEBUG      # HTTPS только в продакшене

# CSRF настройки
CSRF_TRUSTED_ORIGINS = [
    'http://twocomms.shop',
    'http://www.twocomms.shop',
    'https://twocomms.shop',
    'https://www.twocomms.shop',
    # удалён домен pythonanywhere по требованию
]
