"""
Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
"""
import requests
import os
from django.conf import settings
from django.utils import timezone
from datetime import datetime


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.environ.get('TELEGRAM_CHAT_ID')
        
    def is_configured(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –±–æ—Ç"""
        return bool(self.bot_token and self.chat_id)
    
    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.is_configured():
            return False
            
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, data=data, timeout=10)
            return response.status_code == 200
        except Exception as e:
            return False
    
    def format_order_message(self, order):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ"""
        user_info = f"üë§ <b>{order.full_name}</b>\n"
        user_info += f"üìû {order.phone}\n"
        user_info += f"üèôÔ∏è {order.city}\n"
        user_info += f"üì¶ {order.np_office}\n\n"
        
        order_info = f"üõí <b>–ó–∞–∫–∞–∑ #{order.order_number}</b>\n"
        order_info += f"üí∞ –°—É–º–º–∞: {order.total_sum} –≥—Ä–Ω\n"
        order_info += f"üí≥ –û–ø–ª–∞—Ç–∞: {order.get_payment_status_display()}\n"
        order_info += f"üìä –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
        order_info += f"‚è∞ –í—Ä–µ–º—è: {order.created.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
        items_info = "üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for item in order.items.all():
            items_info += f"‚Ä¢ {item.product.title} - {item.quantity} —à—Ç\n"
            if item.color_variant:
                items_info += f"  –¶–≤–µ—Ç: {item.color_variant.color.name}\n"
        
        # –ü—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        promo_info = ""
        if order.promo_code:
            promo_info = f"\nüé´ –ü—Ä–æ–º–æ–∫–æ–¥: {order.promo_code.code}\n"
            promo_info += f"üí∏ –°–∫–∏–¥–∫–∞: {order.discount_amount} –≥—Ä–Ω\n"
        
        message = f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n{user_info}{order_info}{items_info}{promo_info}"
        return message
    
    def send_new_order_notification(self, order):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        if not self.is_configured():
            return False
            
        message = self.format_order_message(order)
        return self.send_message(message)
    
    def send_order_status_update(self, order, old_status, new_status):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        if not self.is_configured():
            return False
            
        message = f"üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.order_number}</b>\n\n"
        message += f"üë§ {order.full_name}\n"
        message += f"üìû {order.phone}\n\n"
        message += f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: <b>{old_status}</b> ‚Üí <b>{new_status}</b>\n"
        message += f"‚è∞ {timezone.now().strftime('%d.%m.%Y %H:%M')}"
        
        return self.send_message(message)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
telegram_notifier = TelegramNotifier()
