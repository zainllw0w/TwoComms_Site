#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ views —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è views.py
"""
import os
import sys
import django

# Setup Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'twocomms.settings')
django.setup()

from storefront import views
from storefront.views import (
    promo, cart, api, loyalty
)

def check_imports():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è"""
    print("=" * 60)
    print("–ü–ï–†–ï–í–Ü–†–ö–ê –Ü–ú–ü–û–†–¢–Ü–í –ó –ú–û–î–£–õ–Ü–í")
    print("=" * 60)
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–º–æ–∫–æ–¥–∏
    print("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—è PROMO:")
    promo_functions = [
        'get_promo_admin_context',
        'admin_promocode_create',
        'admin_promocode_edit',
        'admin_promocode_toggle',
        'admin_promocode_delete',
        'admin_promo_group_create',
        'admin_promo_group_edit',
        'admin_promo_group_delete',
    ]
    
    for func_name in promo_functions:
        if hasattr(promo, func_name):
            print(f"  ‚úÖ {func_name}")
        else:
            errors.append(f"  ‚ùå {func_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ promo")
            print(f"  ‚ùå {func_name}")
    
    # –ö–æ—à–∏–∫
    print("\nüõí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—è CART:")
    cart_functions = [
        'apply_promo_code',
        'remove_promo_code',
    ]
    
    for func_name in cart_functions:
        if hasattr(cart, func_name):
            print(f"  ‚úÖ {func_name}")
        else:
            errors.append(f"  ‚ùå {func_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ cart")
            print(f"  ‚ùå {func_name}")
    
    # API
    print("\nüîå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—è API:")
    api_functions = [
        'get_product_json',
        'get_categories_json',
    ]
    
    for func_name in api_functions:
        if hasattr(api, func_name):
            print(f"  ‚úÖ {func_name}")
        else:
            warnings.append(f"  ‚ö†Ô∏è  {func_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ api")
            print(f"  ‚ö†Ô∏è  {func_name}")
    
    # Loyalty
    print("\n‚≠ê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—è LOYALTY:")
    loyalty_functions = [
        'buy_with_points',
        'purchase_with_points',
    ]
    
    for func_name in loyalty_functions:
        if hasattr(loyalty, func_name):
            print(f"  ‚úÖ {func_name}")
        else:
            warnings.append(f"  ‚ö†Ô∏è  {func_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ loyalty")
            print(f"  ‚ö†Ô∏è  {func_name}")
    
    return errors, warnings


def check_views_py_functions():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π –≤ views.py"""
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–Ü–ó –§–£–ù–ö–¶–Ü–ô –í views.py")
    print("=" * 60)
    
    import inspect
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ views.py
    views_file = 'storefront/views.py'
    
    with open(views_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ def —Ñ—É–Ω–∫—Ü—ñ—ó
    import re
    functions = re.findall(r'^def (\w+)\(', content, re.MULTILINE)
    
    print(f"\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(functions)} —Ñ—É–Ω–∫—Ü—ñ–π –≤ views.py:")
    
    critical_functions = []
    modular_functions = []
    
    for func in functions:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —î –≤ –º–æ–¥—É–ª—è—Ö
        is_in_modules = False
        module_location = None
        
        if hasattr(promo, func):
            is_in_modules = True
            module_location = 'views/promo.py'
        elif hasattr(cart, func):
            is_in_modules = True
            module_location = 'views/cart.py'
        elif hasattr(api, func):
            is_in_modules = True
            module_location = 'views/api.py'
        elif hasattr(loyalty, func):
            is_in_modules = True
            module_location = 'views/loyalty.py'
        
        if is_in_modules:
            print(f"  üìÅ {func} ‚Üí {module_location}")
            modular_functions.append(func)
        else:
            print(f"  üî¥ {func} ‚Üí –¢–Ü–õ–¨–ö–ò –í views.py (–∫—Ä–∏—Ç–∏—á–Ω–∞)")
            critical_functions.append(func)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –§—É–Ω–∫—Ü—ñ–π –≤ –º–æ–¥—É–ª—è—Ö: {len(modular_functions)}")
    print(f"  - –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π: {len(critical_functions)}")
    
    if critical_functions:
        print(f"\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á (–ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏):")
        for func in critical_functions:
            print(f"    - {func}")
    
    return critical_functions


def check_admin_panel_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ admin_panel –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ –º–æ–¥—É–ª—ñ"""
    print("\n" + "=" * 60)
    print("–ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô admin_panel")
    print("=" * 60)
    
    with open('storefront/views.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é admin_panel
    import re
    admin_panel_match = re.search(
        r'def admin_panel\(.*?\):(.*?)(?=\ndef |\Z)',
        content,
        re.DOTALL
    )
    
    if admin_panel_match:
        admin_panel_code = admin_panel_match.group(1)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–æ–¥—É–ª—ñ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
        if 'get_promo_admin_context' in admin_panel_code:
            print("  ‚úÖ admin_panel –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î get_promo_admin_context() –∑ –º–æ–¥—É–ª—è promo")
        else:
            print("  ‚ùå admin_panel –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–æ–¥—É–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä—è–º—ñ —ñ–º–ø–æ—Ä—Ç–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
        if 'PromoCode.objects' in admin_panel_code and 'get_promo_admin_context' not in admin_panel_code:
            print("  ‚ö†Ô∏è  admin_panel –º–∞—î –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ PromoCode (–¥—É–±–ª—é–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏)")
        else:
            print("  ‚úÖ admin_panel –Ω–µ –¥—É–±–ª—é—î –ª–æ–≥—ñ–∫—É –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
    
    return True


def main():
    print("\n" + "üîç" * 30)
    print("–î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò VIEWS")
    print("üîç" * 30 + "\n")
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤
    errors, warnings = check_imports()
    
    # 2. –ê–Ω–∞–ª—ñ–∑ views.py
    critical_functions = check_views_py_functions()
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ admin_panel
    check_admin_panel_dependencies()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("–ü–Ü–î–°–£–ú–û–ö")
    print("=" * 60)
    
    if errors:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ò ({len(errors)}):")
        for error in errors:
            print(error)
    
    if warnings:
        print(f"\n‚ö†Ô∏è  –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø ({len(warnings)}):")
        for warning in warnings:
            print(warning)
    
    if not errors and len(critical_functions) <= 1:
        print("\n‚úÖ –í–°–ï –î–û–ë–†–ï!")
        print("   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª—å–Ω–∞, views.py –º–æ–∂–Ω–∞ –±–µ–∫–∞–ø–∏—Ç–∏")
        if critical_functions:
            print(f"   –ö—Ä–∏—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: {', '.join(critical_functions)}")
            print("   (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —è–∫—â–æ —Ü–µ admin_panel –∞–±–æ –ø–æ–¥—ñ–±–Ω–∞ –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ü–û–¢–†–Ü–ë–ù–ê –£–í–ê–ì–ê!")
        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ {len(errors)} –ø–æ–º–∏–ª–æ–∫")
        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ {len(critical_functions)} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –≤ views.py")
        return 1


if __name__ == '__main__':
    sys.exit(main())

