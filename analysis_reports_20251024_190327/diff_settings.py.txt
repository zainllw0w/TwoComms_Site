e09c76c feat: улучшенная безопасность сессий + Django best practices
diff --git a/twocomms/twocomms/settings.py b/twocomms/twocomms/settings.py
index ef87146..2f90580 100644
--- a/twocomms/twocomms/settings.py
+++ b/twocomms/twocomms/settings.py
@@ -463,10 +463,28 @@ else:
         }
     }
 
-# Сессии через cached_db (кэш поверх БД)
+# ============================================================================
+# SESSION CONFIGURATION (E-COMMERCE BEST PRACTICES)
+# ============================================================================
+
+# Session backend (cached_db для производительности и персистентности)
 SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
 SESSION_CACHE_ALIAS = 'default'
 
+# Session cookie lifetime (30 дней для удобства пользователей)
+SESSION_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 дней
+
+# Session security settings
+SESSION_COOKIE_HTTPONLY = True  # Защита от XSS атак (cookie недоступен для JavaScript)
+SESSION_COOKIE_SAMESITE = 'Lax'  # Защита от CSRF атак (cookie не отправляется с других сайтов)
+SESSION_COOKIE_SECURE = not DEBUG  # HTTPS только в продакшене
+
+# Session serializer (JSON для безопасности)
+SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
+
+# Session save optimization (не сохранять на каждый запрос, только при изменениях)
+SESSION_SAVE_EVERY_REQUEST = False
+
 # Кэширование шаблонов (только для продакшена)
 if not DEBUG:
     TEMPLATES[0]['OPTIONS']['loaders'] = [
@@ -550,14 +568,12 @@ if not DEBUG:
     SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
     SECURE_SSL_REDIRECT = True
     SECURE_REDIRECT_EXEMPT = []  # Принудительный редирект для всех URL
-    SESSION_COOKIE_SECURE = True
-    CSRF_COOKIE_SECURE = True
+    # SESSION_COOKIE_SECURE и CSRF_COOKIE_SECURE настроены выше и ниже адаптивно (not DEBUG)
     SECURE_BROWSER_XSS_FILTER = True
     SECURE_CONTENT_TYPE_NOSNIFF = True
     SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
 
-# Настройки сессий (адаптивные для локальной разработки и продакшена)
-SESSION_COOKIE_SECURE = not DEBUG   # HTTPS только в продакшене
+# CSRF cookie security (адаптивная для локальной разработки и продакшена)
 CSRF_COOKIE_SECURE = not DEBUG      # HTTPS только в продакшене
 
 # CSRF настройки
5459345 Fix critical audit issues: performance, security, and code quality
diff --git a/twocomms/twocomms/settings.py b/twocomms/twocomms/settings.py
index e23a647..ef87146 100644
--- a/twocomms/twocomms/settings.py
+++ b/twocomms/twocomms/settings.py
@@ -55,11 +55,22 @@ BASE_DIR = Path(__file__).resolve().parent.parent
 # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
 
 # SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = os.environ.get('SECRET_KEY', 'a_5xi!3wbf(m*j%!dn7#6r0tlhu(z(-qq&@s&kmot6v+kr#y')
-
-# SECURITY WARNING: don't run with debug turned on in production!
+# In production, SECRET_KEY must be set via environment variable
+# In development, we provide a fallback for convenience
 DEBUG = _env_bool('DEBUG', default=False)
 
+if DEBUG:
+    # Development fallback - only used when DEBUG=True
+    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-only-insecure-key-change-in-production')
+else:
+    # Production - SECRET_KEY must be set
+    SECRET_KEY = os.environ.get('SECRET_KEY')
+    if not SECRET_KEY:
+        raise ValueError(
+            "SECRET_KEY environment variable must be set in production! "
+            "Generate a secure key with: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'"
+        )
+
 ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',') if os.environ.get('ALLOWED_HOSTS') else [
     'test.com',
     'www.test.com',
@@ -115,6 +126,7 @@ INSTALLED_APPS = [
 MIDDLEWARE = [
     "twocomms.middleware.ForceHTTPSMiddleware",  # Принудительный HTTPS
     "twocomms.middleware.WWWRedirectMiddleware",  # Редирект с www
+    "twocomms.middleware.SimpleRateLimitMiddleware",  # Rate limiting для защиты от злоупотреблений
     "django.middleware.security.SecurityMiddleware",
     "twocomms.middleware.SecurityHeadersMiddleware",  # CSP и дополнительные заголовки
     "whitenoise.middleware.WhiteNoiseMiddleware",
@@ -407,6 +419,7 @@ DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
 REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')
 REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
 REDIS_DB = os.environ.get('REDIS_DB', '0')
+REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD', '')  # Redis password for production
 
 # Для локальной разработки используем LocMemCache, для продакшена - Redis
 if DEBUG:
@@ -423,12 +436,8 @@ if DEBUG:
         }
     }
 else:
-    # Продакшен - Redis
-    CACHES = {
-        'default': {
-            'BACKEND': 'django_redis.cache.RedisCache',
-            'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
-            'OPTIONS': {
+    # Продакшен - Redis with optional password authentication
+    redis_options = {
                 'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                 'CONNECTION_POOL_KWARGS': {
                     'max_connections': 50,
@@ -438,7 +447,17 @@ else:
                 'SOCKET_TIMEOUT': 5,
                 'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
                 'IGNORE_EXCEPTIONS': True,  # Не падать если Redis недоступен
-            },
+    }
+    
+    # Add password if provided
+    if REDIS_PASSWORD:
+        redis_options['PASSWORD'] = REDIS_PASSWORD
+    
+    CACHES = {
+        'default': {
+            'BACKEND': 'django_redis.cache.RedisCache',
+            'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
+            'OPTIONS': redis_options,
             'KEY_PREFIX': 'twocomms',
             'TIMEOUT': 300,
         }
e43d8fb fix: убрал DEFAULT_FILTER_BACKENDS из DRF settings
diff --git a/twocomms/twocomms/settings.py b/twocomms/twocomms/settings.py
index b7b9063..e23a647 100644
--- a/twocomms/twocomms/settings.py
+++ b/twocomms/twocomms/settings.py
@@ -581,12 +581,6 @@ REST_FRAMEWORK = {
     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
     'PAGE_SIZE': 20,
     
-    # Фильтрация и сортировка
-    'DEFAULT_FILTER_BACKENDS': [
-        'rest_framework.filters.SearchFilter',
-        'rest_framework.filters.OrderingFilter',
-    ],
-    
     # Throttling (ограничение запросов)
     'DEFAULT_THROTTLE_CLASSES': [
         'rest_framework.throttling.AnonRateThrottle',
f33229e feat: Django REST Framework integration + API documentation
diff --git a/twocomms/twocomms/settings.py b/twocomms/twocomms/settings.py
index be10c3c..b7b9063 100644
--- a/twocomms/twocomms/settings.py
+++ b/twocomms/twocomms/settings.py
@@ -99,6 +99,10 @@ INSTALLED_APPS = [
     "django.contrib.sitemaps",      # Sitemap для SEO
     "django.contrib.redirects",     # Редиректы для SEO
     "compressor",                   # Сжатие статических файлов
+    # Django REST Framework
+    "rest_framework",               # DRF для API
+    "drf_spectacular",              # OpenAPI 3 документация
+    # Our apps
     "storefront.apps.StorefrontConfig",  # наше приложение из пакета
     "accounts",                     # регистрируем приложение аккаунтов
     "orders.apps.OrdersConfig",     # заказы (корректный AppConfig)
@@ -545,3 +549,84 @@ CSRF_TRUSTED_ORIGINS = [
     'https://www.twocomms.shop',
     # удалён домен pythonanywhere по требованию
 ]
+
+# ==================== DJANGO REST FRAMEWORK ====================
+
+REST_FRAMEWORK = {
+    # Рендереры
+    'DEFAULT_RENDERER_CLASSES': [
+        'rest_framework.renderers.JSONRenderer',
+        'rest_framework.renderers.BrowsableAPIRenderer',  # для браузера
+    ],
+    
+    # Парсеры
+    'DEFAULT_PARSER_CLASSES': [
+        'rest_framework.parsers.JSONParser',
+        'rest_framework.parsers.FormParser',
+        'rest_framework.parsers.MultiPartParser',
+    ],
+    
+    # Аутентификация (Session + Basic для browsable API)
+    'DEFAULT_AUTHENTICATION_CLASSES': [
+        'rest_framework.authentication.SessionAuthentication',
+        'rest_framework.authentication.BasicAuthentication',
+    ],
+    
+    # Права доступа по умолчанию (read-only для всех)
+    'DEFAULT_PERMISSION_CLASSES': [
+        'rest_framework.permissions.AllowAny',
+    ],
+    
+    # Пагинация
+    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
+    'PAGE_SIZE': 20,
+    
+    # Фильтрация и сортировка
+    'DEFAULT_FILTER_BACKENDS': [
+        'rest_framework.filters.SearchFilter',
+        'rest_framework.filters.OrderingFilter',
+    ],
+    
+    # Throttling (ограничение запросов)
+    'DEFAULT_THROTTLE_CLASSES': [
+        'rest_framework.throttling.AnonRateThrottle',
+        'rest_framework.throttling.UserRateThrottle',
+    ],
+    'DEFAULT_THROTTLE_RATES': {
+        'anon': '100/hour',  # Анонимные пользователи: 100 запросов/час
+        'user': '1000/hour',  # Аутентифицированные: 1000 запросов/час
+    },
+    
+    # OpenAPI Schema (drf-spectacular)
+    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
+}
+
+# ==================== DRF SPECTACULAR (OpenAPI 3 Documentation) ====================
+
+SPECTACULAR_SETTINGS = {
+    'TITLE': 'TwoComms Shop API',
+    'DESCRIPTION': 'RESTful API для магазина TwoComms - категории, товары, корзина',
+    'VERSION': '1.0.0',
+    'SERVE_INCLUDE_SCHEMA': False,
+    
+    # Схема
+    'SCHEMA_PATH_PREFIX': r'/api/',
+    'COMPONENT_SPLIT_REQUEST': True,
+    
+    # UI настройки
+    'SWAGGER_UI_SETTINGS': {
+        'deepLinking': True,
+        'persistAuthorization': True,
+        'displayOperationId': True,
+    },
+    
+    # Аутентификация в документации
+    'SECURITY': [
+        {'SessionAuth': []},
+        {'BasicAuth': []},
+    ],
+    
+    # Сортировка
+    'SORT_OPERATIONS': True,
+    'SORT_OPERATION_PARAMETERS': True,
+}
